package models

import "strings"

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type WindowsDeviceMalwareStateState string

const (
	WindowsDeviceMalwareStateStateabandoned        WindowsDeviceMalwareStateState = "Abandoned"
	WindowsDeviceMalwareStateStateallowFailed      WindowsDeviceMalwareStateState = "AllowFailed"
	WindowsDeviceMalwareStateStateallowed          WindowsDeviceMalwareStateState = "Allowed"
	WindowsDeviceMalwareStateStateblockFailed      WindowsDeviceMalwareStateState = "BlockFailed"
	WindowsDeviceMalwareStateStateblocked          WindowsDeviceMalwareStateState = "Blocked"
	WindowsDeviceMalwareStateStatecleanFailed      WindowsDeviceMalwareStateState = "CleanFailed"
	WindowsDeviceMalwareStateStatecleaned          WindowsDeviceMalwareStateState = "Cleaned"
	WindowsDeviceMalwareStateStatedetected         WindowsDeviceMalwareStateState = "Detected"
	WindowsDeviceMalwareStateStatequarantineFailed WindowsDeviceMalwareStateState = "QuarantineFailed"
	WindowsDeviceMalwareStateStatequarantined      WindowsDeviceMalwareStateState = "Quarantined"
	WindowsDeviceMalwareStateStateremoveFailed     WindowsDeviceMalwareStateState = "RemoveFailed"
	WindowsDeviceMalwareStateStateremoved          WindowsDeviceMalwareStateState = "Removed"
	WindowsDeviceMalwareStateStateunknown          WindowsDeviceMalwareStateState = "Unknown"
)

func PossibleValuesForWindowsDeviceMalwareStateState() []string {
	return []string{
		string(WindowsDeviceMalwareStateStateabandoned),
		string(WindowsDeviceMalwareStateStateallowFailed),
		string(WindowsDeviceMalwareStateStateallowed),
		string(WindowsDeviceMalwareStateStateblockFailed),
		string(WindowsDeviceMalwareStateStateblocked),
		string(WindowsDeviceMalwareStateStatecleanFailed),
		string(WindowsDeviceMalwareStateStatecleaned),
		string(WindowsDeviceMalwareStateStatedetected),
		string(WindowsDeviceMalwareStateStatequarantineFailed),
		string(WindowsDeviceMalwareStateStatequarantined),
		string(WindowsDeviceMalwareStateStateremoveFailed),
		string(WindowsDeviceMalwareStateStateremoved),
		string(WindowsDeviceMalwareStateStateunknown),
	}
}

func parseWindowsDeviceMalwareStateState(input string) (*WindowsDeviceMalwareStateState, error) {
	vals := map[string]WindowsDeviceMalwareStateState{
		"abandoned":        WindowsDeviceMalwareStateStateabandoned,
		"allowfailed":      WindowsDeviceMalwareStateStateallowFailed,
		"allowed":          WindowsDeviceMalwareStateStateallowed,
		"blockfailed":      WindowsDeviceMalwareStateStateblockFailed,
		"blocked":          WindowsDeviceMalwareStateStateblocked,
		"cleanfailed":      WindowsDeviceMalwareStateStatecleanFailed,
		"cleaned":          WindowsDeviceMalwareStateStatecleaned,
		"detected":         WindowsDeviceMalwareStateStatedetected,
		"quarantinefailed": WindowsDeviceMalwareStateStatequarantineFailed,
		"quarantined":      WindowsDeviceMalwareStateStatequarantined,
		"removefailed":     WindowsDeviceMalwareStateStateremoveFailed,
		"removed":          WindowsDeviceMalwareStateStateremoved,
		"unknown":          WindowsDeviceMalwareStateStateunknown,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := WindowsDeviceMalwareStateState(input)
	return &out, nil
}
