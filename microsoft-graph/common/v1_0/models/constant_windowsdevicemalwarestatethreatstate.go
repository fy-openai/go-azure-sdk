package models

import "strings"

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type WindowsDeviceMalwareStateThreatState string

const (
	WindowsDeviceMalwareStateThreatStateactionFailed                      WindowsDeviceMalwareStateThreatState = "ActionFailed"
	WindowsDeviceMalwareStateThreatStateactive                            WindowsDeviceMalwareStateThreatState = "Active"
	WindowsDeviceMalwareStateThreatStateallowed                           WindowsDeviceMalwareStateThreatState = "Allowed"
	WindowsDeviceMalwareStateThreatStatecleaned                           WindowsDeviceMalwareStateThreatState = "Cleaned"
	WindowsDeviceMalwareStateThreatStatefullScanRequired                  WindowsDeviceMalwareStateThreatState = "FullScanRequired"
	WindowsDeviceMalwareStateThreatStatemanualStepsRequired               WindowsDeviceMalwareStateThreatState = "ManualStepsRequired"
	WindowsDeviceMalwareStateThreatStatenoStatusCleared                   WindowsDeviceMalwareStateThreatState = "NoStatusCleared"
	WindowsDeviceMalwareStateThreatStatequarantined                       WindowsDeviceMalwareStateThreatState = "Quarantined"
	WindowsDeviceMalwareStateThreatStaterebootRequired                    WindowsDeviceMalwareStateThreatState = "RebootRequired"
	WindowsDeviceMalwareStateThreatStateremediatedWithNonCriticalFailures WindowsDeviceMalwareStateThreatState = "RemediatedWithNonCriticalFailures"
	WindowsDeviceMalwareStateThreatStateremoved                           WindowsDeviceMalwareStateThreatState = "Removed"
)

func PossibleValuesForWindowsDeviceMalwareStateThreatState() []string {
	return []string{
		string(WindowsDeviceMalwareStateThreatStateactionFailed),
		string(WindowsDeviceMalwareStateThreatStateactive),
		string(WindowsDeviceMalwareStateThreatStateallowed),
		string(WindowsDeviceMalwareStateThreatStatecleaned),
		string(WindowsDeviceMalwareStateThreatStatefullScanRequired),
		string(WindowsDeviceMalwareStateThreatStatemanualStepsRequired),
		string(WindowsDeviceMalwareStateThreatStatenoStatusCleared),
		string(WindowsDeviceMalwareStateThreatStatequarantined),
		string(WindowsDeviceMalwareStateThreatStaterebootRequired),
		string(WindowsDeviceMalwareStateThreatStateremediatedWithNonCriticalFailures),
		string(WindowsDeviceMalwareStateThreatStateremoved),
	}
}

func parseWindowsDeviceMalwareStateThreatState(input string) (*WindowsDeviceMalwareStateThreatState, error) {
	vals := map[string]WindowsDeviceMalwareStateThreatState{
		"actionfailed":                      WindowsDeviceMalwareStateThreatStateactionFailed,
		"active":                            WindowsDeviceMalwareStateThreatStateactive,
		"allowed":                           WindowsDeviceMalwareStateThreatStateallowed,
		"cleaned":                           WindowsDeviceMalwareStateThreatStatecleaned,
		"fullscanrequired":                  WindowsDeviceMalwareStateThreatStatefullScanRequired,
		"manualstepsrequired":               WindowsDeviceMalwareStateThreatStatemanualStepsRequired,
		"nostatuscleared":                   WindowsDeviceMalwareStateThreatStatenoStatusCleared,
		"quarantined":                       WindowsDeviceMalwareStateThreatStatequarantined,
		"rebootrequired":                    WindowsDeviceMalwareStateThreatStaterebootRequired,
		"remediatedwithnoncriticalfailures": WindowsDeviceMalwareStateThreatStateremediatedWithNonCriticalFailures,
		"removed":                           WindowsDeviceMalwareStateThreatStateremoved,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := WindowsDeviceMalwareStateThreatState(input)
	return &out, nil
}
