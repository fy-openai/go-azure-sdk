package models

import "strings"

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type WindowsMalwareStateCountState string

const (
	WindowsMalwareStateCountStateactionFailed                      WindowsMalwareStateCountState = "ActionFailed"
	WindowsMalwareStateCountStateactive                            WindowsMalwareStateCountState = "Active"
	WindowsMalwareStateCountStateallowed                           WindowsMalwareStateCountState = "Allowed"
	WindowsMalwareStateCountStatecleaned                           WindowsMalwareStateCountState = "Cleaned"
	WindowsMalwareStateCountStatefullScanRequired                  WindowsMalwareStateCountState = "FullScanRequired"
	WindowsMalwareStateCountStatemanualStepsRequired               WindowsMalwareStateCountState = "ManualStepsRequired"
	WindowsMalwareStateCountStatenoStatusCleared                   WindowsMalwareStateCountState = "NoStatusCleared"
	WindowsMalwareStateCountStatequarantined                       WindowsMalwareStateCountState = "Quarantined"
	WindowsMalwareStateCountStaterebootRequired                    WindowsMalwareStateCountState = "RebootRequired"
	WindowsMalwareStateCountStateremediatedWithNonCriticalFailures WindowsMalwareStateCountState = "RemediatedWithNonCriticalFailures"
	WindowsMalwareStateCountStateremoved                           WindowsMalwareStateCountState = "Removed"
)

func PossibleValuesForWindowsMalwareStateCountState() []string {
	return []string{
		string(WindowsMalwareStateCountStateactionFailed),
		string(WindowsMalwareStateCountStateactive),
		string(WindowsMalwareStateCountStateallowed),
		string(WindowsMalwareStateCountStatecleaned),
		string(WindowsMalwareStateCountStatefullScanRequired),
		string(WindowsMalwareStateCountStatemanualStepsRequired),
		string(WindowsMalwareStateCountStatenoStatusCleared),
		string(WindowsMalwareStateCountStatequarantined),
		string(WindowsMalwareStateCountStaterebootRequired),
		string(WindowsMalwareStateCountStateremediatedWithNonCriticalFailures),
		string(WindowsMalwareStateCountStateremoved),
	}
}

func parseWindowsMalwareStateCountState(input string) (*WindowsMalwareStateCountState, error) {
	vals := map[string]WindowsMalwareStateCountState{
		"actionfailed":                      WindowsMalwareStateCountStateactionFailed,
		"active":                            WindowsMalwareStateCountStateactive,
		"allowed":                           WindowsMalwareStateCountStateallowed,
		"cleaned":                           WindowsMalwareStateCountStatecleaned,
		"fullscanrequired":                  WindowsMalwareStateCountStatefullScanRequired,
		"manualstepsrequired":               WindowsMalwareStateCountStatemanualStepsRequired,
		"nostatuscleared":                   WindowsMalwareStateCountStatenoStatusCleared,
		"quarantined":                       WindowsMalwareStateCountStatequarantined,
		"rebootrequired":                    WindowsMalwareStateCountStaterebootRequired,
		"remediatedwithnoncriticalfailures": WindowsMalwareStateCountStateremediatedWithNonCriticalFailures,
		"removed":                           WindowsMalwareStateCountStateremoved,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := WindowsMalwareStateCountState(input)
	return &out, nil
}
