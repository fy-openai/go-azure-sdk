package models

import "strings"

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type SecurityVulnerabilitySeverity string

const (
	SecurityVulnerabilitySeveritycritical SecurityVulnerabilitySeverity = "Critical"
	SecurityVulnerabilitySeverityhigh     SecurityVulnerabilitySeverity = "High"
	SecurityVulnerabilitySeveritylow      SecurityVulnerabilitySeverity = "Low"
	SecurityVulnerabilitySeveritymedium   SecurityVulnerabilitySeverity = "Medium"
	SecurityVulnerabilitySeveritynone     SecurityVulnerabilitySeverity = "None"
)

func PossibleValuesForSecurityVulnerabilitySeverity() []string {
	return []string{
		string(SecurityVulnerabilitySeveritycritical),
		string(SecurityVulnerabilitySeverityhigh),
		string(SecurityVulnerabilitySeveritylow),
		string(SecurityVulnerabilitySeveritymedium),
		string(SecurityVulnerabilitySeveritynone),
	}
}

func parseSecurityVulnerabilitySeverity(input string) (*SecurityVulnerabilitySeverity, error) {
	vals := map[string]SecurityVulnerabilitySeverity{
		"critical": SecurityVulnerabilitySeveritycritical,
		"high":     SecurityVulnerabilitySeverityhigh,
		"low":      SecurityVulnerabilitySeveritylow,
		"medium":   SecurityVulnerabilitySeveritymedium,
		"none":     SecurityVulnerabilitySeveritynone,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := SecurityVulnerabilitySeverity(input)
	return &out, nil
}
