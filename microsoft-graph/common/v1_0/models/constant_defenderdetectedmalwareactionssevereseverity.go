package models

import "strings"

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type DefenderDetectedMalwareActionsSevereSeverity string

const (
	DefenderDetectedMalwareActionsSevereSeverityallow         DefenderDetectedMalwareActionsSevereSeverity = "Allow"
	DefenderDetectedMalwareActionsSevereSeverityblock         DefenderDetectedMalwareActionsSevereSeverity = "Block"
	DefenderDetectedMalwareActionsSevereSeverityclean         DefenderDetectedMalwareActionsSevereSeverity = "Clean"
	DefenderDetectedMalwareActionsSevereSeveritydeviceDefault DefenderDetectedMalwareActionsSevereSeverity = "DeviceDefault"
	DefenderDetectedMalwareActionsSevereSeverityquarantine    DefenderDetectedMalwareActionsSevereSeverity = "Quarantine"
	DefenderDetectedMalwareActionsSevereSeverityremove        DefenderDetectedMalwareActionsSevereSeverity = "Remove"
	DefenderDetectedMalwareActionsSevereSeverityuserDefined   DefenderDetectedMalwareActionsSevereSeverity = "UserDefined"
)

func PossibleValuesForDefenderDetectedMalwareActionsSevereSeverity() []string {
	return []string{
		string(DefenderDetectedMalwareActionsSevereSeverityallow),
		string(DefenderDetectedMalwareActionsSevereSeverityblock),
		string(DefenderDetectedMalwareActionsSevereSeverityclean),
		string(DefenderDetectedMalwareActionsSevereSeveritydeviceDefault),
		string(DefenderDetectedMalwareActionsSevereSeverityquarantine),
		string(DefenderDetectedMalwareActionsSevereSeverityremove),
		string(DefenderDetectedMalwareActionsSevereSeverityuserDefined),
	}
}

func parseDefenderDetectedMalwareActionsSevereSeverity(input string) (*DefenderDetectedMalwareActionsSevereSeverity, error) {
	vals := map[string]DefenderDetectedMalwareActionsSevereSeverity{
		"allow":         DefenderDetectedMalwareActionsSevereSeverityallow,
		"block":         DefenderDetectedMalwareActionsSevereSeverityblock,
		"clean":         DefenderDetectedMalwareActionsSevereSeverityclean,
		"devicedefault": DefenderDetectedMalwareActionsSevereSeveritydeviceDefault,
		"quarantine":    DefenderDetectedMalwareActionsSevereSeverityquarantine,
		"remove":        DefenderDetectedMalwareActionsSevereSeverityremove,
		"userdefined":   DefenderDetectedMalwareActionsSevereSeverityuserDefined,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := DefenderDetectedMalwareActionsSevereSeverity(input)
	return &out, nil
}
