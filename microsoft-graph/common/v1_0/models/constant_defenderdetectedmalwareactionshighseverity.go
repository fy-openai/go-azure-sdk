package models

import "strings"

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type DefenderDetectedMalwareActionsHighSeverity string

const (
	DefenderDetectedMalwareActionsHighSeverityallow         DefenderDetectedMalwareActionsHighSeverity = "Allow"
	DefenderDetectedMalwareActionsHighSeverityblock         DefenderDetectedMalwareActionsHighSeverity = "Block"
	DefenderDetectedMalwareActionsHighSeverityclean         DefenderDetectedMalwareActionsHighSeverity = "Clean"
	DefenderDetectedMalwareActionsHighSeveritydeviceDefault DefenderDetectedMalwareActionsHighSeverity = "DeviceDefault"
	DefenderDetectedMalwareActionsHighSeverityquarantine    DefenderDetectedMalwareActionsHighSeverity = "Quarantine"
	DefenderDetectedMalwareActionsHighSeverityremove        DefenderDetectedMalwareActionsHighSeverity = "Remove"
	DefenderDetectedMalwareActionsHighSeverityuserDefined   DefenderDetectedMalwareActionsHighSeverity = "UserDefined"
)

func PossibleValuesForDefenderDetectedMalwareActionsHighSeverity() []string {
	return []string{
		string(DefenderDetectedMalwareActionsHighSeverityallow),
		string(DefenderDetectedMalwareActionsHighSeverityblock),
		string(DefenderDetectedMalwareActionsHighSeverityclean),
		string(DefenderDetectedMalwareActionsHighSeveritydeviceDefault),
		string(DefenderDetectedMalwareActionsHighSeverityquarantine),
		string(DefenderDetectedMalwareActionsHighSeverityremove),
		string(DefenderDetectedMalwareActionsHighSeverityuserDefined),
	}
}

func parseDefenderDetectedMalwareActionsHighSeverity(input string) (*DefenderDetectedMalwareActionsHighSeverity, error) {
	vals := map[string]DefenderDetectedMalwareActionsHighSeverity{
		"allow":         DefenderDetectedMalwareActionsHighSeverityallow,
		"block":         DefenderDetectedMalwareActionsHighSeverityblock,
		"clean":         DefenderDetectedMalwareActionsHighSeverityclean,
		"devicedefault": DefenderDetectedMalwareActionsHighSeveritydeviceDefault,
		"quarantine":    DefenderDetectedMalwareActionsHighSeverityquarantine,
		"remove":        DefenderDetectedMalwareActionsHighSeverityremove,
		"userdefined":   DefenderDetectedMalwareActionsHighSeverityuserDefined,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := DefenderDetectedMalwareActionsHighSeverity(input)
	return &out, nil
}
