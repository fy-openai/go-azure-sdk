package models


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

 
type FileAttachmentOperationPredicate struct {
	 ContentBytes *string
	 ContentId *string
	 ContentLocation *string
	 ContentType *string
	 Id *string
	 IsInline *bool
	 LastModifiedDateTime *string
	 Name *string
	 ODataType *string
	 Size *int64
}

func (p FileAttachmentOperationPredicate) Matches(input FileAttachment) bool {

	if p.ContentBytes != nil && (input.ContentBytes == nil || *p.ContentBytes != *input.ContentBytes) {
	 	return false
	}


	if p.ContentId != nil && (input.ContentId == nil || *p.ContentId != *input.ContentId) {
	 	return false
	}


	if p.ContentLocation != nil && (input.ContentLocation == nil || *p.ContentLocation != *input.ContentLocation) {
	 	return false
	}


	if p.ContentType != nil && (input.ContentType == nil || *p.ContentType != *input.ContentType) {
	 	return false
	}


	if p.Id != nil && (input.Id == nil || *p.Id != *input.Id) {
	 	return false
	}


	if p.IsInline != nil && (input.IsInline == nil || *p.IsInline != *input.IsInline) {
	 	return false
	}


	if p.LastModifiedDateTime != nil && (input.LastModifiedDateTime == nil || *p.LastModifiedDateTime != *input.LastModifiedDateTime) {
	 	return false
	}


	if p.Name != nil && (input.Name == nil || *p.Name != *input.Name) {
	 	return false
	}


	if p.ODataType != nil && (input.ODataType == nil || *p.ODataType != *input.ODataType) {
	 	return false
	}


	if p.Size != nil && (input.Size == nil || *p.Size != *input.Size) {
	 	return false
	}


	return true
}

