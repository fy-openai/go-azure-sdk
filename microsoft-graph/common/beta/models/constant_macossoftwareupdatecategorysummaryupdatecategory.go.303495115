package models

import "strings"


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.



type MacOSSoftwareUpdateCategorySummaryUpdateCategory string

const (
	MacOSSoftwareUpdateCategorySummaryUpdateCategoryconfigurationDataFile MacOSSoftwareUpdateCategorySummaryUpdateCategory = "ConfigurationDataFile"
	MacOSSoftwareUpdateCategorySummaryUpdateCategorycritical MacOSSoftwareUpdateCategorySummaryUpdateCategory = "Critical"
	MacOSSoftwareUpdateCategorySummaryUpdateCategoryfirmware MacOSSoftwareUpdateCategorySummaryUpdateCategory = "Firmware"
	MacOSSoftwareUpdateCategorySummaryUpdateCategoryother MacOSSoftwareUpdateCategorySummaryUpdateCategory = "Other"
)


func PossibleValuesForMacOSSoftwareUpdateCategorySummaryUpdateCategory() []string {
	return []string{
		string(MacOSSoftwareUpdateCategorySummaryUpdateCategoryconfigurationDataFile),
string(MacOSSoftwareUpdateCategorySummaryUpdateCategorycritical),
string(MacOSSoftwareUpdateCategorySummaryUpdateCategoryfirmware),
string(MacOSSoftwareUpdateCategorySummaryUpdateCategoryother),
	}
}



func parseMacOSSoftwareUpdateCategorySummaryUpdateCategory(input string) (*MacOSSoftwareUpdateCategorySummaryUpdateCategory, error) {
	vals := map[string]MacOSSoftwareUpdateCategorySummaryUpdateCategory{
		"configurationdatafile": MacOSSoftwareUpdateCategorySummaryUpdateCategoryconfigurationDataFile,
"critical": MacOSSoftwareUpdateCategorySummaryUpdateCategorycritical,
"firmware": MacOSSoftwareUpdateCategorySummaryUpdateCategoryfirmware,
"other": MacOSSoftwareUpdateCategorySummaryUpdateCategoryother,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := MacOSSoftwareUpdateCategorySummaryUpdateCategory(input)
	return &out, nil
}
