package models

import "strings"


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.



type SecurityRetentionLabelActionAfterRetentionPeriod string

const (
	SecurityRetentionLabelActionAfterRetentionPerioddelete SecurityRetentionLabelActionAfterRetentionPeriod = "Delete"
	SecurityRetentionLabelActionAfterRetentionPeriodnone SecurityRetentionLabelActionAfterRetentionPeriod = "None"
	SecurityRetentionLabelActionAfterRetentionPeriodrelabel SecurityRetentionLabelActionAfterRetentionPeriod = "Relabel"
	SecurityRetentionLabelActionAfterRetentionPeriodstartDispositionReview SecurityRetentionLabelActionAfterRetentionPeriod = "StartDispositionReview"
)


func PossibleValuesForSecurityRetentionLabelActionAfterRetentionPeriod() []string {
	return []string{
		string(SecurityRetentionLabelActionAfterRetentionPerioddelete),
string(SecurityRetentionLabelActionAfterRetentionPeriodnone),
string(SecurityRetentionLabelActionAfterRetentionPeriodrelabel),
string(SecurityRetentionLabelActionAfterRetentionPeriodstartDispositionReview),
	}
}



func parseSecurityRetentionLabelActionAfterRetentionPeriod(input string) (*SecurityRetentionLabelActionAfterRetentionPeriod, error) {
	vals := map[string]SecurityRetentionLabelActionAfterRetentionPeriod{
		"delete": SecurityRetentionLabelActionAfterRetentionPerioddelete,
"none": SecurityRetentionLabelActionAfterRetentionPeriodnone,
"relabel": SecurityRetentionLabelActionAfterRetentionPeriodrelabel,
"startdispositionreview": SecurityRetentionLabelActionAfterRetentionPeriodstartDispositionReview,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := SecurityRetentionLabelActionAfterRetentionPeriod(input)
	return &out, nil
}
