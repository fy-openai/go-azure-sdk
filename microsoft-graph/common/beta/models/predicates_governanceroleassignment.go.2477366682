package models


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

 
type GovernanceRoleAssignmentOperationPredicate struct {
	 AssignmentState *string
	 EndDateTime *string
	 ExternalId *string
	 Id *string
	 LinkedEligibleRoleAssignmentId *string
	 MemberType *string
	 ODataType *string
	 ResourceId *string
	 RoleDefinitionId *string
	 StartDateTime *string
	 Status *string
	 SubjectId *string
}

func (p GovernanceRoleAssignmentOperationPredicate) Matches(input GovernanceRoleAssignment) bool {

	if p.AssignmentState != nil && (input.AssignmentState == nil || *p.AssignmentState != *input.AssignmentState) {
	 	return false
	}


	if p.EndDateTime != nil && (input.EndDateTime == nil || *p.EndDateTime != *input.EndDateTime) {
	 	return false
	}


	if p.ExternalId != nil && (input.ExternalId == nil || *p.ExternalId != *input.ExternalId) {
	 	return false
	}


	if p.Id != nil && (input.Id == nil || *p.Id != *input.Id) {
	 	return false
	}


	if p.LinkedEligibleRoleAssignmentId != nil && (input.LinkedEligibleRoleAssignmentId == nil || *p.LinkedEligibleRoleAssignmentId != *input.LinkedEligibleRoleAssignmentId) {
	 	return false
	}


	if p.MemberType != nil && (input.MemberType == nil || *p.MemberType != *input.MemberType) {
	 	return false
	}


	if p.ODataType != nil && (input.ODataType == nil || *p.ODataType != *input.ODataType) {
	 	return false
	}


	if p.ResourceId != nil && (input.ResourceId == nil || *p.ResourceId != *input.ResourceId) {
	 	return false
	}


	if p.RoleDefinitionId != nil && (input.RoleDefinitionId == nil || *p.RoleDefinitionId != *input.RoleDefinitionId) {
	 	return false
	}


	if p.StartDateTime != nil && (input.StartDateTime == nil || *p.StartDateTime != *input.StartDateTime) {
	 	return false
	}


	if p.Status != nil && (input.Status == nil || *p.Status != *input.Status) {
	 	return false
	}


	if p.SubjectId != nil && (input.SubjectId == nil || *p.SubjectId != *input.SubjectId) {
	 	return false
	}


	return true
}

