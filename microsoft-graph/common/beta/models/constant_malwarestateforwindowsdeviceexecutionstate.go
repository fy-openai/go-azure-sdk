package models

import "strings"

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type MalwareStateForWindowsDeviceExecutionState string

const (
	MalwareStateForWindowsDeviceExecutionStateallowed    MalwareStateForWindowsDeviceExecutionState = "Allowed"
	MalwareStateForWindowsDeviceExecutionStateblocked    MalwareStateForWindowsDeviceExecutionState = "Blocked"
	MalwareStateForWindowsDeviceExecutionStatenotRunning MalwareStateForWindowsDeviceExecutionState = "NotRunning"
	MalwareStateForWindowsDeviceExecutionStaterunning    MalwareStateForWindowsDeviceExecutionState = "Running"
	MalwareStateForWindowsDeviceExecutionStateunknown    MalwareStateForWindowsDeviceExecutionState = "Unknown"
)

func PossibleValuesForMalwareStateForWindowsDeviceExecutionState() []string {
	return []string{
		string(MalwareStateForWindowsDeviceExecutionStateallowed),
		string(MalwareStateForWindowsDeviceExecutionStateblocked),
		string(MalwareStateForWindowsDeviceExecutionStatenotRunning),
		string(MalwareStateForWindowsDeviceExecutionStaterunning),
		string(MalwareStateForWindowsDeviceExecutionStateunknown),
	}
}

func parseMalwareStateForWindowsDeviceExecutionState(input string) (*MalwareStateForWindowsDeviceExecutionState, error) {
	vals := map[string]MalwareStateForWindowsDeviceExecutionState{
		"allowed":    MalwareStateForWindowsDeviceExecutionStateallowed,
		"blocked":    MalwareStateForWindowsDeviceExecutionStateblocked,
		"notrunning": MalwareStateForWindowsDeviceExecutionStatenotRunning,
		"running":    MalwareStateForWindowsDeviceExecutionStaterunning,
		"unknown":    MalwareStateForWindowsDeviceExecutionStateunknown,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := MalwareStateForWindowsDeviceExecutionState(input)
	return &out, nil
}
