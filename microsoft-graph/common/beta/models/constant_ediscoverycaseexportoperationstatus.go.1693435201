package models

import "strings"


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.



type EdiscoveryCaseExportOperationStatus string

const (
	EdiscoveryCaseExportOperationStatusfailed EdiscoveryCaseExportOperationStatus = "Failed"
	EdiscoveryCaseExportOperationStatusnotStarted EdiscoveryCaseExportOperationStatus = "NotStarted"
	EdiscoveryCaseExportOperationStatuspartiallySucceeded EdiscoveryCaseExportOperationStatus = "PartiallySucceeded"
	EdiscoveryCaseExportOperationStatusrunning EdiscoveryCaseExportOperationStatus = "Running"
	EdiscoveryCaseExportOperationStatussubmissionFailed EdiscoveryCaseExportOperationStatus = "SubmissionFailed"
	EdiscoveryCaseExportOperationStatussucceeded EdiscoveryCaseExportOperationStatus = "Succeeded"
)


func PossibleValuesForEdiscoveryCaseExportOperationStatus() []string {
	return []string{
		string(EdiscoveryCaseExportOperationStatusfailed),
string(EdiscoveryCaseExportOperationStatusnotStarted),
string(EdiscoveryCaseExportOperationStatuspartiallySucceeded),
string(EdiscoveryCaseExportOperationStatusrunning),
string(EdiscoveryCaseExportOperationStatussubmissionFailed),
string(EdiscoveryCaseExportOperationStatussucceeded),
	}
}



func parseEdiscoveryCaseExportOperationStatus(input string) (*EdiscoveryCaseExportOperationStatus, error) {
	vals := map[string]EdiscoveryCaseExportOperationStatus{
		"failed": EdiscoveryCaseExportOperationStatusfailed,
"notstarted": EdiscoveryCaseExportOperationStatusnotStarted,
"partiallysucceeded": EdiscoveryCaseExportOperationStatuspartiallySucceeded,
"running": EdiscoveryCaseExportOperationStatusrunning,
"submissionfailed": EdiscoveryCaseExportOperationStatussubmissionFailed,
"succeeded": EdiscoveryCaseExportOperationStatussucceeded,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := EdiscoveryCaseExportOperationStatus(input)
	return &out, nil
}
