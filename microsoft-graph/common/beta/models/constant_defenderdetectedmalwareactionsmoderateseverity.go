package models

import "strings"

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type DefenderDetectedMalwareActionsModerateSeverity string

const (
	DefenderDetectedMalwareActionsModerateSeverityallow         DefenderDetectedMalwareActionsModerateSeverity = "Allow"
	DefenderDetectedMalwareActionsModerateSeverityblock         DefenderDetectedMalwareActionsModerateSeverity = "Block"
	DefenderDetectedMalwareActionsModerateSeverityclean         DefenderDetectedMalwareActionsModerateSeverity = "Clean"
	DefenderDetectedMalwareActionsModerateSeveritydeviceDefault DefenderDetectedMalwareActionsModerateSeverity = "DeviceDefault"
	DefenderDetectedMalwareActionsModerateSeverityquarantine    DefenderDetectedMalwareActionsModerateSeverity = "Quarantine"
	DefenderDetectedMalwareActionsModerateSeverityremove        DefenderDetectedMalwareActionsModerateSeverity = "Remove"
	DefenderDetectedMalwareActionsModerateSeverityuserDefined   DefenderDetectedMalwareActionsModerateSeverity = "UserDefined"
)

func PossibleValuesForDefenderDetectedMalwareActionsModerateSeverity() []string {
	return []string{
		string(DefenderDetectedMalwareActionsModerateSeverityallow),
		string(DefenderDetectedMalwareActionsModerateSeverityblock),
		string(DefenderDetectedMalwareActionsModerateSeverityclean),
		string(DefenderDetectedMalwareActionsModerateSeveritydeviceDefault),
		string(DefenderDetectedMalwareActionsModerateSeverityquarantine),
		string(DefenderDetectedMalwareActionsModerateSeverityremove),
		string(DefenderDetectedMalwareActionsModerateSeverityuserDefined),
	}
}

func parseDefenderDetectedMalwareActionsModerateSeverity(input string) (*DefenderDetectedMalwareActionsModerateSeverity, error) {
	vals := map[string]DefenderDetectedMalwareActionsModerateSeverity{
		"allow":         DefenderDetectedMalwareActionsModerateSeverityallow,
		"block":         DefenderDetectedMalwareActionsModerateSeverityblock,
		"clean":         DefenderDetectedMalwareActionsModerateSeverityclean,
		"devicedefault": DefenderDetectedMalwareActionsModerateSeveritydeviceDefault,
		"quarantine":    DefenderDetectedMalwareActionsModerateSeverityquarantine,
		"remove":        DefenderDetectedMalwareActionsModerateSeverityremove,
		"userdefined":   DefenderDetectedMalwareActionsModerateSeverityuserDefined,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := DefenderDetectedMalwareActionsModerateSeverity(input)
	return &out, nil
}
