package models


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

 
type RecommendationBaseOperationPredicate struct {
	 Benefits *string
	 CreatedDateTime *string
	 DisplayName *string
	 Id *string
	 ImpactStartDateTime *string
	 ImpactType *string
	 Insights *string
	 LastCheckedDateTime *string
	 LastModifiedBy *string
	 LastModifiedDateTime *string
	 ODataType *string
	 PostponeUntilDateTime *string
	 RemediationImpact *string
}

func (p RecommendationBaseOperationPredicate) Matches(input RecommendationBase) bool {

	if p.Benefits != nil && (input.Benefits == nil || *p.Benefits != *input.Benefits) {
	 	return false
	}


	if p.CreatedDateTime != nil && (input.CreatedDateTime == nil || *p.CreatedDateTime != *input.CreatedDateTime) {
	 	return false
	}


	if p.DisplayName != nil && (input.DisplayName == nil || *p.DisplayName != *input.DisplayName) {
	 	return false
	}


	if p.Id != nil && (input.Id == nil || *p.Id != *input.Id) {
	 	return false
	}


	if p.ImpactStartDateTime != nil && (input.ImpactStartDateTime == nil || *p.ImpactStartDateTime != *input.ImpactStartDateTime) {
	 	return false
	}


	if p.ImpactType != nil && (input.ImpactType == nil || *p.ImpactType != *input.ImpactType) {
	 	return false
	}


	if p.Insights != nil && (input.Insights == nil || *p.Insights != *input.Insights) {
	 	return false
	}


	if p.LastCheckedDateTime != nil && (input.LastCheckedDateTime == nil || *p.LastCheckedDateTime != *input.LastCheckedDateTime) {
	 	return false
	}


	if p.LastModifiedBy != nil && (input.LastModifiedBy == nil || *p.LastModifiedBy != *input.LastModifiedBy) {
	 	return false
	}


	if p.LastModifiedDateTime != nil && (input.LastModifiedDateTime == nil || *p.LastModifiedDateTime != *input.LastModifiedDateTime) {
	 	return false
	}


	if p.ODataType != nil && (input.ODataType == nil || *p.ODataType != *input.ODataType) {
	 	return false
	}


	if p.PostponeUntilDateTime != nil && (input.PostponeUntilDateTime == nil || *p.PostponeUntilDateTime != *input.PostponeUntilDateTime) {
	 	return false
	}


	if p.RemediationImpact != nil && (input.RemediationImpact == nil || *p.RemediationImpact != *input.RemediationImpact) {
	 	return false
	}


	return true
}

