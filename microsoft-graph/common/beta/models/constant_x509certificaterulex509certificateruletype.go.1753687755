package models

import "strings"


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.



type X509CertificateRuleX509CertificateRuleType string

const (
	X509CertificateRuleX509CertificateRuleTypeissuerSubject X509CertificateRuleX509CertificateRuleType = "IssuerSubject"
	X509CertificateRuleX509CertificateRuleTypepolicyOID X509CertificateRuleX509CertificateRuleType = "PolicyOID"
)


func PossibleValuesForX509CertificateRuleX509CertificateRuleType() []string {
	return []string{
		string(X509CertificateRuleX509CertificateRuleTypeissuerSubject),
string(X509CertificateRuleX509CertificateRuleTypepolicyOID),
	}
}



func parseX509CertificateRuleX509CertificateRuleType(input string) (*X509CertificateRuleX509CertificateRuleType, error) {
	vals := map[string]X509CertificateRuleX509CertificateRuleType{
		"issuersubject": X509CertificateRuleX509CertificateRuleTypeissuerSubject,
"policyoid": X509CertificateRuleX509CertificateRuleTypepolicyOID,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := X509CertificateRuleX509CertificateRuleType(input)
	return &out, nil
}
