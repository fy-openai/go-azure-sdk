package models


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

 
type DeviceComplianceScriptRunSummaryOperationPredicate struct {
	 DetectionScriptErrorDeviceCount *int64
	 DetectionScriptPendingDeviceCount *int64
	 Id *string
	 IssueDetectedDeviceCount *int64
	 LastScriptRunDateTime *string
	 NoIssueDetectedDeviceCount *int64
	 ODataType *string
}

func (p DeviceComplianceScriptRunSummaryOperationPredicate) Matches(input DeviceComplianceScriptRunSummary) bool {

	if p.DetectionScriptErrorDeviceCount != nil && (input.DetectionScriptErrorDeviceCount == nil || *p.DetectionScriptErrorDeviceCount != *input.DetectionScriptErrorDeviceCount) {
	 	return false
	}


	if p.DetectionScriptPendingDeviceCount != nil && (input.DetectionScriptPendingDeviceCount == nil || *p.DetectionScriptPendingDeviceCount != *input.DetectionScriptPendingDeviceCount) {
	 	return false
	}


	if p.Id != nil && (input.Id == nil || *p.Id != *input.Id) {
	 	return false
	}


	if p.IssueDetectedDeviceCount != nil && (input.IssueDetectedDeviceCount == nil || *p.IssueDetectedDeviceCount != *input.IssueDetectedDeviceCount) {
	 	return false
	}


	if p.LastScriptRunDateTime != nil && (input.LastScriptRunDateTime == nil || *p.LastScriptRunDateTime != *input.LastScriptRunDateTime) {
	 	return false
	}


	if p.NoIssueDetectedDeviceCount != nil && (input.NoIssueDetectedDeviceCount == nil || *p.NoIssueDetectedDeviceCount != *input.NoIssueDetectedDeviceCount) {
	 	return false
	}


	if p.ODataType != nil && (input.ODataType == nil || *p.ODataType != *input.ODataType) {
	 	return false
	}


	return true
}

