package models

import "strings"


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.



type SecurityConfigurationTaskEndpointSecurityPolicyProfile string

const (
	SecurityConfigurationTaskEndpointSecurityPolicyProfileaccountProtection SecurityConfigurationTaskEndpointSecurityPolicyProfile = "AccountProtection"
	SecurityConfigurationTaskEndpointSecurityPolicyProfileantivirus SecurityConfigurationTaskEndpointSecurityPolicyProfile = "Antivirus"
	SecurityConfigurationTaskEndpointSecurityPolicyProfileappAndBrowserIsolation SecurityConfigurationTaskEndpointSecurityPolicyProfile = "AppAndBrowserIsolation"
	SecurityConfigurationTaskEndpointSecurityPolicyProfileapplicationControl SecurityConfigurationTaskEndpointSecurityPolicyProfile = "ApplicationControl"
	SecurityConfigurationTaskEndpointSecurityPolicyProfileattackSurfaceReductionRules SecurityConfigurationTaskEndpointSecurityPolicyProfile = "AttackSurfaceReductionRules"
	SecurityConfigurationTaskEndpointSecurityPolicyProfilebitLocker SecurityConfigurationTaskEndpointSecurityPolicyProfile = "BitLocker"
	SecurityConfigurationTaskEndpointSecurityPolicyProfiledeviceControl SecurityConfigurationTaskEndpointSecurityPolicyProfile = "DeviceControl"
	SecurityConfigurationTaskEndpointSecurityPolicyProfileendpointDetectionAndResponse SecurityConfigurationTaskEndpointSecurityPolicyProfile = "EndpointDetectionAndResponse"
	SecurityConfigurationTaskEndpointSecurityPolicyProfileexploitProtection SecurityConfigurationTaskEndpointSecurityPolicyProfile = "ExploitProtection"
	SecurityConfigurationTaskEndpointSecurityPolicyProfilefileVault SecurityConfigurationTaskEndpointSecurityPolicyProfile = "FileVault"
	SecurityConfigurationTaskEndpointSecurityPolicyProfilefirewall SecurityConfigurationTaskEndpointSecurityPolicyProfile = "Firewall"
	SecurityConfigurationTaskEndpointSecurityPolicyProfilefirewallRules SecurityConfigurationTaskEndpointSecurityPolicyProfile = "FirewallRules"
	SecurityConfigurationTaskEndpointSecurityPolicyProfileunknown SecurityConfigurationTaskEndpointSecurityPolicyProfile = "Unknown"
	SecurityConfigurationTaskEndpointSecurityPolicyProfilewebProtection SecurityConfigurationTaskEndpointSecurityPolicyProfile = "WebProtection"
	SecurityConfigurationTaskEndpointSecurityPolicyProfilewindowsSecurity SecurityConfigurationTaskEndpointSecurityPolicyProfile = "WindowsSecurity"
)


func PossibleValuesForSecurityConfigurationTaskEndpointSecurityPolicyProfile() []string {
	return []string{
		string(SecurityConfigurationTaskEndpointSecurityPolicyProfileaccountProtection),
string(SecurityConfigurationTaskEndpointSecurityPolicyProfileantivirus),
string(SecurityConfigurationTaskEndpointSecurityPolicyProfileappAndBrowserIsolation),
string(SecurityConfigurationTaskEndpointSecurityPolicyProfileapplicationControl),
string(SecurityConfigurationTaskEndpointSecurityPolicyProfileattackSurfaceReductionRules),
string(SecurityConfigurationTaskEndpointSecurityPolicyProfilebitLocker),
string(SecurityConfigurationTaskEndpointSecurityPolicyProfiledeviceControl),
string(SecurityConfigurationTaskEndpointSecurityPolicyProfileendpointDetectionAndResponse),
string(SecurityConfigurationTaskEndpointSecurityPolicyProfileexploitProtection),
string(SecurityConfigurationTaskEndpointSecurityPolicyProfilefileVault),
string(SecurityConfigurationTaskEndpointSecurityPolicyProfilefirewall),
string(SecurityConfigurationTaskEndpointSecurityPolicyProfilefirewallRules),
string(SecurityConfigurationTaskEndpointSecurityPolicyProfileunknown),
string(SecurityConfigurationTaskEndpointSecurityPolicyProfilewebProtection),
string(SecurityConfigurationTaskEndpointSecurityPolicyProfilewindowsSecurity),
	}
}



func parseSecurityConfigurationTaskEndpointSecurityPolicyProfile(input string) (*SecurityConfigurationTaskEndpointSecurityPolicyProfile, error) {
	vals := map[string]SecurityConfigurationTaskEndpointSecurityPolicyProfile{
		"accountprotection": SecurityConfigurationTaskEndpointSecurityPolicyProfileaccountProtection,
"antivirus": SecurityConfigurationTaskEndpointSecurityPolicyProfileantivirus,
"appandbrowserisolation": SecurityConfigurationTaskEndpointSecurityPolicyProfileappAndBrowserIsolation,
"applicationcontrol": SecurityConfigurationTaskEndpointSecurityPolicyProfileapplicationControl,
"attacksurfacereductionrules": SecurityConfigurationTaskEndpointSecurityPolicyProfileattackSurfaceReductionRules,
"bitlocker": SecurityConfigurationTaskEndpointSecurityPolicyProfilebitLocker,
"devicecontrol": SecurityConfigurationTaskEndpointSecurityPolicyProfiledeviceControl,
"endpointdetectionandresponse": SecurityConfigurationTaskEndpointSecurityPolicyProfileendpointDetectionAndResponse,
"exploitprotection": SecurityConfigurationTaskEndpointSecurityPolicyProfileexploitProtection,
"filevault": SecurityConfigurationTaskEndpointSecurityPolicyProfilefileVault,
"firewall": SecurityConfigurationTaskEndpointSecurityPolicyProfilefirewall,
"firewallrules": SecurityConfigurationTaskEndpointSecurityPolicyProfilefirewallRules,
"unknown": SecurityConfigurationTaskEndpointSecurityPolicyProfileunknown,
"webprotection": SecurityConfigurationTaskEndpointSecurityPolicyProfilewebProtection,
"windowssecurity": SecurityConfigurationTaskEndpointSecurityPolicyProfilewindowsSecurity,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := SecurityConfigurationTaskEndpointSecurityPolicyProfile(input)
	return &out, nil
}
