package models

import "strings"


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.



type MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationMode string

const (
	MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationModeany MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationMode = "Any"
	MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationModedeviceBasedPush MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationMode = "DeviceBasedPush"
	MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationModepush MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationMode = "Push"
)


func PossibleValuesForMicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationMode() []string {
	return []string{
		string(MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationModeany),
string(MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationModedeviceBasedPush),
string(MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationModepush),
	}
}



func parseMicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationMode(input string) (*MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationMode, error) {
	vals := map[string]MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationMode{
		"any": MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationModeany,
"devicebasedpush": MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationModedeviceBasedPush,
"push": MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationModepush,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := MicrosoftAuthenticatorAuthenticationMethodTargetAuthenticationMode(input)
	return &out, nil
}
