package models

import "strings"


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.



type UserExperienceAnalyticsAnomalyDeviceDeviceStatus string

const (
	UserExperienceAnalyticsAnomalyDeviceDeviceStatusaffected UserExperienceAnalyticsAnomalyDeviceDeviceStatus = "Affected"
	UserExperienceAnalyticsAnomalyDeviceDeviceStatusanomalous UserExperienceAnalyticsAnomalyDeviceDeviceStatus = "Anomalous"
	UserExperienceAnalyticsAnomalyDeviceDeviceStatusatRisk UserExperienceAnalyticsAnomalyDeviceDeviceStatus = "AtRisk"
)


func PossibleValuesForUserExperienceAnalyticsAnomalyDeviceDeviceStatus() []string {
	return []string{
		string(UserExperienceAnalyticsAnomalyDeviceDeviceStatusaffected),
string(UserExperienceAnalyticsAnomalyDeviceDeviceStatusanomalous),
string(UserExperienceAnalyticsAnomalyDeviceDeviceStatusatRisk),
	}
}



func parseUserExperienceAnalyticsAnomalyDeviceDeviceStatus(input string) (*UserExperienceAnalyticsAnomalyDeviceDeviceStatus, error) {
	vals := map[string]UserExperienceAnalyticsAnomalyDeviceDeviceStatus{
		"affected": UserExperienceAnalyticsAnomalyDeviceDeviceStatusaffected,
"anomalous": UserExperienceAnalyticsAnomalyDeviceDeviceStatusanomalous,
"atrisk": UserExperienceAnalyticsAnomalyDeviceDeviceStatusatRisk,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := UserExperienceAnalyticsAnomalyDeviceDeviceStatus(input)
	return &out, nil
}
