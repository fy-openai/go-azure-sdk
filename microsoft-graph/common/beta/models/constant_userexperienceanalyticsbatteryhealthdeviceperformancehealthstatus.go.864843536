package models

import "strings"


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.



type UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatus string

const (
	UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatusinsufficientData UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatus = "InsufficientData"
	UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatusmeetingGoals UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatus = "MeetingGoals"
	UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatusneedsAttention UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatus = "NeedsAttention"
	UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatusunknown UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatus = "Unknown"
)


func PossibleValuesForUserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatus() []string {
	return []string{
		string(UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatusinsufficientData),
string(UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatusmeetingGoals),
string(UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatusneedsAttention),
string(UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatusunknown),
	}
}



func parseUserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatus(input string) (*UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatus, error) {
	vals := map[string]UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatus{
		"insufficientdata": UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatusinsufficientData,
"meetinggoals": UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatusmeetingGoals,
"needsattention": UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatusneedsAttention,
"unknown": UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatusunknown,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := UserExperienceAnalyticsBatteryHealthDevicePerformanceHealthStatus(input)
	return &out, nil
}
