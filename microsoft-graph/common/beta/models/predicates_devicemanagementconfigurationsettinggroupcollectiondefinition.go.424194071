package models


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

 
type DeviceManagementConfigurationSettingGroupCollectionDefinitionOperationPredicate struct {
	 BaseUri *string
	 CategoryId *string
	 Description *string
	 DisplayName *string
	 HelpText *string
	 Id *string
	 MaximumCount *int64
	 MinimumCount *int64
	 Name *string
	 ODataType *string
	 OffsetUri *string
	 RootDefinitionId *string
	 Version *string
}

func (p DeviceManagementConfigurationSettingGroupCollectionDefinitionOperationPredicate) Matches(input DeviceManagementConfigurationSettingGroupCollectionDefinition) bool {

	if p.BaseUri != nil && (input.BaseUri == nil || *p.BaseUri != *input.BaseUri) {
	 	return false
	}


	if p.CategoryId != nil && (input.CategoryId == nil || *p.CategoryId != *input.CategoryId) {
	 	return false
	}


	if p.Description != nil && (input.Description == nil || *p.Description != *input.Description) {
	 	return false
	}


	if p.DisplayName != nil && (input.DisplayName == nil || *p.DisplayName != *input.DisplayName) {
	 	return false
	}


	if p.HelpText != nil && (input.HelpText == nil || *p.HelpText != *input.HelpText) {
	 	return false
	}


	if p.Id != nil && (input.Id == nil || *p.Id != *input.Id) {
	 	return false
	}


	if p.MaximumCount != nil && (input.MaximumCount == nil || *p.MaximumCount != *input.MaximumCount) {
	 	return false
	}


	if p.MinimumCount != nil && (input.MinimumCount == nil || *p.MinimumCount != *input.MinimumCount) {
	 	return false
	}


	if p.Name != nil && (input.Name == nil || *p.Name != *input.Name) {
	 	return false
	}


	if p.ODataType != nil && (input.ODataType == nil || *p.ODataType != *input.ODataType) {
	 	return false
	}


	if p.OffsetUri != nil && (input.OffsetUri == nil || *p.OffsetUri != *input.OffsetUri) {
	 	return false
	}


	if p.RootDefinitionId != nil && (input.RootDefinitionId == nil || *p.RootDefinitionId != *input.RootDefinitionId) {
	 	return false
	}


	if p.Version != nil && (input.Version == nil || *p.Version != *input.Version) {
	 	return false
	}


	return true
}

