package models

import "strings"


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.



type SecurityKubernetesServiceAccountEvidenceRemediationStatus string

const (
	SecurityKubernetesServiceAccountEvidenceRemediationStatusblocked SecurityKubernetesServiceAccountEvidenceRemediationStatus = "Blocked"
	SecurityKubernetesServiceAccountEvidenceRemediationStatusnone SecurityKubernetesServiceAccountEvidenceRemediationStatus = "None"
	SecurityKubernetesServiceAccountEvidenceRemediationStatusnotFound SecurityKubernetesServiceAccountEvidenceRemediationStatus = "NotFound"
	SecurityKubernetesServiceAccountEvidenceRemediationStatusprevented SecurityKubernetesServiceAccountEvidenceRemediationStatus = "Prevented"
	SecurityKubernetesServiceAccountEvidenceRemediationStatusremediated SecurityKubernetesServiceAccountEvidenceRemediationStatus = "Remediated"
)


func PossibleValuesForSecurityKubernetesServiceAccountEvidenceRemediationStatus() []string {
	return []string{
		string(SecurityKubernetesServiceAccountEvidenceRemediationStatusblocked),
string(SecurityKubernetesServiceAccountEvidenceRemediationStatusnone),
string(SecurityKubernetesServiceAccountEvidenceRemediationStatusnotFound),
string(SecurityKubernetesServiceAccountEvidenceRemediationStatusprevented),
string(SecurityKubernetesServiceAccountEvidenceRemediationStatusremediated),
	}
}



func parseSecurityKubernetesServiceAccountEvidenceRemediationStatus(input string) (*SecurityKubernetesServiceAccountEvidenceRemediationStatus, error) {
	vals := map[string]SecurityKubernetesServiceAccountEvidenceRemediationStatus{
		"blocked": SecurityKubernetesServiceAccountEvidenceRemediationStatusblocked,
"none": SecurityKubernetesServiceAccountEvidenceRemediationStatusnone,
"notfound": SecurityKubernetesServiceAccountEvidenceRemediationStatusnotFound,
"prevented": SecurityKubernetesServiceAccountEvidenceRemediationStatusprevented,
"remediated": SecurityKubernetesServiceAccountEvidenceRemediationStatusremediated,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := SecurityKubernetesServiceAccountEvidenceRemediationStatus(input)
	return &out, nil
}
