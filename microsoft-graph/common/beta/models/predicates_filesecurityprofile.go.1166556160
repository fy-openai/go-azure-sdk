package models


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

 
type FileSecurityProfileOperationPredicate struct {
	 AzureSubscriptionId *string
	 AzureTenantId *string
	 CertificateThumbprint *string
	 FileType *string
	 FirstSeenDateTime *string
	 Id *string
	 LastSeenDateTime *string
	 ODataType *string
	 RiskScore *string
	 Size *int64
}

func (p FileSecurityProfileOperationPredicate) Matches(input FileSecurityProfile) bool {

	if p.AzureSubscriptionId != nil && (input.AzureSubscriptionId == nil || *p.AzureSubscriptionId != *input.AzureSubscriptionId) {
	 	return false
	}


	if p.AzureTenantId != nil && (input.AzureTenantId == nil || *p.AzureTenantId != *input.AzureTenantId) {
	 	return false
	}


	if p.CertificateThumbprint != nil && (input.CertificateThumbprint == nil || *p.CertificateThumbprint != *input.CertificateThumbprint) {
	 	return false
	}


	if p.FileType != nil && (input.FileType == nil || *p.FileType != *input.FileType) {
	 	return false
	}


	if p.FirstSeenDateTime != nil && (input.FirstSeenDateTime == nil || *p.FirstSeenDateTime != *input.FirstSeenDateTime) {
	 	return false
	}


	if p.Id != nil && (input.Id == nil || *p.Id != *input.Id) {
	 	return false
	}


	if p.LastSeenDateTime != nil && (input.LastSeenDateTime == nil || *p.LastSeenDateTime != *input.LastSeenDateTime) {
	 	return false
	}


	if p.ODataType != nil && (input.ODataType == nil || *p.ODataType != *input.ODataType) {
	 	return false
	}


	if p.RiskScore != nil && (input.RiskScore == nil || *p.RiskScore != *input.RiskScore) {
	 	return false
	}


	if p.Size != nil && (input.Size == nil || *p.Size != *input.Size) {
	 	return false
	}


	return true
}

