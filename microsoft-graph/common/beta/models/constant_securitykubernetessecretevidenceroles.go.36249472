package models

import "strings"


// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.



type SecurityKubernetesSecretEvidenceRoles string

const (
	SecurityKubernetesSecretEvidenceRolesadded SecurityKubernetesSecretEvidenceRoles = "Added"
	SecurityKubernetesSecretEvidenceRolesattacked SecurityKubernetesSecretEvidenceRoles = "Attacked"
	SecurityKubernetesSecretEvidenceRolesattacker SecurityKubernetesSecretEvidenceRoles = "Attacker"
	SecurityKubernetesSecretEvidenceRolescommandAndControl SecurityKubernetesSecretEvidenceRoles = "CommandAndControl"
	SecurityKubernetesSecretEvidenceRolescompromised SecurityKubernetesSecretEvidenceRoles = "Compromised"
	SecurityKubernetesSecretEvidenceRolescontextual SecurityKubernetesSecretEvidenceRoles = "Contextual"
	SecurityKubernetesSecretEvidenceRolescreated SecurityKubernetesSecretEvidenceRoles = "Created"
	SecurityKubernetesSecretEvidenceRolesdestination SecurityKubernetesSecretEvidenceRoles = "Destination"
	SecurityKubernetesSecretEvidenceRolesedited SecurityKubernetesSecretEvidenceRoles = "Edited"
	SecurityKubernetesSecretEvidenceRolesloaded SecurityKubernetesSecretEvidenceRoles = "Loaded"
	SecurityKubernetesSecretEvidenceRolespolicyViolator SecurityKubernetesSecretEvidenceRoles = "PolicyViolator"
	SecurityKubernetesSecretEvidenceRolesscanned SecurityKubernetesSecretEvidenceRoles = "Scanned"
	SecurityKubernetesSecretEvidenceRolessource SecurityKubernetesSecretEvidenceRoles = "Source"
	SecurityKubernetesSecretEvidenceRolessuspicious SecurityKubernetesSecretEvidenceRoles = "Suspicious"
	SecurityKubernetesSecretEvidenceRolesunknown SecurityKubernetesSecretEvidenceRoles = "Unknown"
)


func PossibleValuesForSecurityKubernetesSecretEvidenceRoles() []string {
	return []string{
		string(SecurityKubernetesSecretEvidenceRolesadded),
string(SecurityKubernetesSecretEvidenceRolesattacked),
string(SecurityKubernetesSecretEvidenceRolesattacker),
string(SecurityKubernetesSecretEvidenceRolescommandAndControl),
string(SecurityKubernetesSecretEvidenceRolescompromised),
string(SecurityKubernetesSecretEvidenceRolescontextual),
string(SecurityKubernetesSecretEvidenceRolescreated),
string(SecurityKubernetesSecretEvidenceRolesdestination),
string(SecurityKubernetesSecretEvidenceRolesedited),
string(SecurityKubernetesSecretEvidenceRolesloaded),
string(SecurityKubernetesSecretEvidenceRolespolicyViolator),
string(SecurityKubernetesSecretEvidenceRolesscanned),
string(SecurityKubernetesSecretEvidenceRolessource),
string(SecurityKubernetesSecretEvidenceRolessuspicious),
string(SecurityKubernetesSecretEvidenceRolesunknown),
	}
}



func parseSecurityKubernetesSecretEvidenceRoles(input string) (*SecurityKubernetesSecretEvidenceRoles, error) {
	vals := map[string]SecurityKubernetesSecretEvidenceRoles{
		"added": SecurityKubernetesSecretEvidenceRolesadded,
"attacked": SecurityKubernetesSecretEvidenceRolesattacked,
"attacker": SecurityKubernetesSecretEvidenceRolesattacker,
"commandandcontrol": SecurityKubernetesSecretEvidenceRolescommandAndControl,
"compromised": SecurityKubernetesSecretEvidenceRolescompromised,
"contextual": SecurityKubernetesSecretEvidenceRolescontextual,
"created": SecurityKubernetesSecretEvidenceRolescreated,
"destination": SecurityKubernetesSecretEvidenceRolesdestination,
"edited": SecurityKubernetesSecretEvidenceRolesedited,
"loaded": SecurityKubernetesSecretEvidenceRolesloaded,
"policyviolator": SecurityKubernetesSecretEvidenceRolespolicyViolator,
"scanned": SecurityKubernetesSecretEvidenceRolesscanned,
"source": SecurityKubernetesSecretEvidenceRolessource,
"suspicious": SecurityKubernetesSecretEvidenceRolessuspicious,
"unknown": SecurityKubernetesSecretEvidenceRolesunknown,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := SecurityKubernetesSecretEvidenceRoles(input)
	return &out, nil
}
