package models

import "strings"

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type WindowsDeviceMalwareStateExecutionState string

const (
	WindowsDeviceMalwareStateExecutionStateallowed    WindowsDeviceMalwareStateExecutionState = "Allowed"
	WindowsDeviceMalwareStateExecutionStateblocked    WindowsDeviceMalwareStateExecutionState = "Blocked"
	WindowsDeviceMalwareStateExecutionStatenotRunning WindowsDeviceMalwareStateExecutionState = "NotRunning"
	WindowsDeviceMalwareStateExecutionStaterunning    WindowsDeviceMalwareStateExecutionState = "Running"
	WindowsDeviceMalwareStateExecutionStateunknown    WindowsDeviceMalwareStateExecutionState = "Unknown"
)

func PossibleValuesForWindowsDeviceMalwareStateExecutionState() []string {
	return []string{
		string(WindowsDeviceMalwareStateExecutionStateallowed),
		string(WindowsDeviceMalwareStateExecutionStateblocked),
		string(WindowsDeviceMalwareStateExecutionStatenotRunning),
		string(WindowsDeviceMalwareStateExecutionStaterunning),
		string(WindowsDeviceMalwareStateExecutionStateunknown),
	}
}

func parseWindowsDeviceMalwareStateExecutionState(input string) (*WindowsDeviceMalwareStateExecutionState, error) {
	vals := map[string]WindowsDeviceMalwareStateExecutionState{
		"allowed":    WindowsDeviceMalwareStateExecutionStateallowed,
		"blocked":    WindowsDeviceMalwareStateExecutionStateblocked,
		"notrunning": WindowsDeviceMalwareStateExecutionStatenotRunning,
		"running":    WindowsDeviceMalwareStateExecutionStaterunning,
		"unknown":    WindowsDeviceMalwareStateExecutionStateunknown,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := WindowsDeviceMalwareStateExecutionState(input)
	return &out, nil
}
