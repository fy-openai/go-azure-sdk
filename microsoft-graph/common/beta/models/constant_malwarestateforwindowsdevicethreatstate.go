package models

import "strings"

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type MalwareStateForWindowsDeviceThreatState string

const (
	MalwareStateForWindowsDeviceThreatStateactionFailed                      MalwareStateForWindowsDeviceThreatState = "ActionFailed"
	MalwareStateForWindowsDeviceThreatStateactive                            MalwareStateForWindowsDeviceThreatState = "Active"
	MalwareStateForWindowsDeviceThreatStateallowed                           MalwareStateForWindowsDeviceThreatState = "Allowed"
	MalwareStateForWindowsDeviceThreatStatecleaned                           MalwareStateForWindowsDeviceThreatState = "Cleaned"
	MalwareStateForWindowsDeviceThreatStatefullScanRequired                  MalwareStateForWindowsDeviceThreatState = "FullScanRequired"
	MalwareStateForWindowsDeviceThreatStatemanualStepsRequired               MalwareStateForWindowsDeviceThreatState = "ManualStepsRequired"
	MalwareStateForWindowsDeviceThreatStatenoStatusCleared                   MalwareStateForWindowsDeviceThreatState = "NoStatusCleared"
	MalwareStateForWindowsDeviceThreatStatequarantined                       MalwareStateForWindowsDeviceThreatState = "Quarantined"
	MalwareStateForWindowsDeviceThreatStaterebootRequired                    MalwareStateForWindowsDeviceThreatState = "RebootRequired"
	MalwareStateForWindowsDeviceThreatStateremediatedWithNonCriticalFailures MalwareStateForWindowsDeviceThreatState = "RemediatedWithNonCriticalFailures"
	MalwareStateForWindowsDeviceThreatStateremoved                           MalwareStateForWindowsDeviceThreatState = "Removed"
)

func PossibleValuesForMalwareStateForWindowsDeviceThreatState() []string {
	return []string{
		string(MalwareStateForWindowsDeviceThreatStateactionFailed),
		string(MalwareStateForWindowsDeviceThreatStateactive),
		string(MalwareStateForWindowsDeviceThreatStateallowed),
		string(MalwareStateForWindowsDeviceThreatStatecleaned),
		string(MalwareStateForWindowsDeviceThreatStatefullScanRequired),
		string(MalwareStateForWindowsDeviceThreatStatemanualStepsRequired),
		string(MalwareStateForWindowsDeviceThreatStatenoStatusCleared),
		string(MalwareStateForWindowsDeviceThreatStatequarantined),
		string(MalwareStateForWindowsDeviceThreatStaterebootRequired),
		string(MalwareStateForWindowsDeviceThreatStateremediatedWithNonCriticalFailures),
		string(MalwareStateForWindowsDeviceThreatStateremoved),
	}
}

func parseMalwareStateForWindowsDeviceThreatState(input string) (*MalwareStateForWindowsDeviceThreatState, error) {
	vals := map[string]MalwareStateForWindowsDeviceThreatState{
		"actionfailed":                      MalwareStateForWindowsDeviceThreatStateactionFailed,
		"active":                            MalwareStateForWindowsDeviceThreatStateactive,
		"allowed":                           MalwareStateForWindowsDeviceThreatStateallowed,
		"cleaned":                           MalwareStateForWindowsDeviceThreatStatecleaned,
		"fullscanrequired":                  MalwareStateForWindowsDeviceThreatStatefullScanRequired,
		"manualstepsrequired":               MalwareStateForWindowsDeviceThreatStatemanualStepsRequired,
		"nostatuscleared":                   MalwareStateForWindowsDeviceThreatStatenoStatusCleared,
		"quarantined":                       MalwareStateForWindowsDeviceThreatStatequarantined,
		"rebootrequired":                    MalwareStateForWindowsDeviceThreatStaterebootRequired,
		"remediatedwithnoncriticalfailures": MalwareStateForWindowsDeviceThreatStateremediatedWithNonCriticalFailures,
		"removed":                           MalwareStateForWindowsDeviceThreatStateremoved,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := MalwareStateForWindowsDeviceThreatState(input)
	return &out, nil
}
