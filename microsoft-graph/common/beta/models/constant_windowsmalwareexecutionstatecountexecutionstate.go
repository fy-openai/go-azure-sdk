package models

import "strings"

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type WindowsMalwareExecutionStateCountExecutionState string

const (
	WindowsMalwareExecutionStateCountExecutionStateallowed    WindowsMalwareExecutionStateCountExecutionState = "Allowed"
	WindowsMalwareExecutionStateCountExecutionStateblocked    WindowsMalwareExecutionStateCountExecutionState = "Blocked"
	WindowsMalwareExecutionStateCountExecutionStatenotRunning WindowsMalwareExecutionStateCountExecutionState = "NotRunning"
	WindowsMalwareExecutionStateCountExecutionStaterunning    WindowsMalwareExecutionStateCountExecutionState = "Running"
	WindowsMalwareExecutionStateCountExecutionStateunknown    WindowsMalwareExecutionStateCountExecutionState = "Unknown"
)

func PossibleValuesForWindowsMalwareExecutionStateCountExecutionState() []string {
	return []string{
		string(WindowsMalwareExecutionStateCountExecutionStateallowed),
		string(WindowsMalwareExecutionStateCountExecutionStateblocked),
		string(WindowsMalwareExecutionStateCountExecutionStatenotRunning),
		string(WindowsMalwareExecutionStateCountExecutionStaterunning),
		string(WindowsMalwareExecutionStateCountExecutionStateunknown),
	}
}

func parseWindowsMalwareExecutionStateCountExecutionState(input string) (*WindowsMalwareExecutionStateCountExecutionState, error) {
	vals := map[string]WindowsMalwareExecutionStateCountExecutionState{
		"allowed":    WindowsMalwareExecutionStateCountExecutionStateallowed,
		"blocked":    WindowsMalwareExecutionStateCountExecutionStateblocked,
		"notrunning": WindowsMalwareExecutionStateCountExecutionStatenotRunning,
		"running":    WindowsMalwareExecutionStateCountExecutionStaterunning,
		"unknown":    WindowsMalwareExecutionStateCountExecutionStateunknown,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := WindowsMalwareExecutionStateCountExecutionState(input)
	return &out, nil
}
