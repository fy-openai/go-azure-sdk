package usermanageddevicewindowsprotectionstatedetectedmalwarestate

import (
	"fmt"
	"strings"

	"github.com/hashicorp/go-azure-helpers/resourcemanager/resourceids"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

var _ resourceids.ResourceId = UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId{}

// UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId is a struct representing the Resource ID for a User Managed Device Windows Protection State Detected Malware State
type UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId struct {
	UserId                      string
	ManagedDeviceId             string
	WindowsDeviceMalwareStateId string
}

// NewUserManagedDeviceWindowsProtectionStateDetectedMalwareStateID returns a new UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId struct
func NewUserManagedDeviceWindowsProtectionStateDetectedMalwareStateID(userId string, managedDeviceId string, windowsDeviceMalwareStateId string) UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId {
	return UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId{
		UserId:                      userId,
		ManagedDeviceId:             managedDeviceId,
		WindowsDeviceMalwareStateId: windowsDeviceMalwareStateId,
	}
}

// ParseUserManagedDeviceWindowsProtectionStateDetectedMalwareStateID parses 'input' into a UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId
func ParseUserManagedDeviceWindowsProtectionStateDetectedMalwareStateID(input string) (*UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId, error) {
	parser := resourceids.NewParserFromResourceIdType(UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId{})
	parsed, err := parser.Parse(input, false)
	if err != nil {
		return nil, fmt.Errorf("parsing %q: %+v", input, err)
	}

	var ok bool
	id := UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId{}

	if id.UserId, ok = parsed.Parsed["userId"]; !ok {
		return nil, resourceids.NewSegmentNotSpecifiedError(id, "userId", *parsed)
	}

	if id.ManagedDeviceId, ok = parsed.Parsed["managedDeviceId"]; !ok {
		return nil, resourceids.NewSegmentNotSpecifiedError(id, "managedDeviceId", *parsed)
	}

	if id.WindowsDeviceMalwareStateId, ok = parsed.Parsed["windowsDeviceMalwareStateId"]; !ok {
		return nil, resourceids.NewSegmentNotSpecifiedError(id, "windowsDeviceMalwareStateId", *parsed)
	}

	return &id, nil
}

// ParseUserManagedDeviceWindowsProtectionStateDetectedMalwareStateIDInsensitively parses 'input' case-insensitively into a UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId
// note: this method should only be used for API response data and not user input
func ParseUserManagedDeviceWindowsProtectionStateDetectedMalwareStateIDInsensitively(input string) (*UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId, error) {
	parser := resourceids.NewParserFromResourceIdType(UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId{})
	parsed, err := parser.Parse(input, true)
	if err != nil {
		return nil, fmt.Errorf("parsing %q: %+v", input, err)
	}

	var ok bool
	id := UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId{}

	if id.UserId, ok = parsed.Parsed["userId"]; !ok {
		return nil, resourceids.NewSegmentNotSpecifiedError(id, "userId", *parsed)
	}

	if id.ManagedDeviceId, ok = parsed.Parsed["managedDeviceId"]; !ok {
		return nil, resourceids.NewSegmentNotSpecifiedError(id, "managedDeviceId", *parsed)
	}

	if id.WindowsDeviceMalwareStateId, ok = parsed.Parsed["windowsDeviceMalwareStateId"]; !ok {
		return nil, resourceids.NewSegmentNotSpecifiedError(id, "windowsDeviceMalwareStateId", *parsed)
	}

	return &id, nil
}

// ValidateUserManagedDeviceWindowsProtectionStateDetectedMalwareStateID checks that 'input' can be parsed as a User Managed Device Windows Protection State Detected Malware State ID
func ValidateUserManagedDeviceWindowsProtectionStateDetectedMalwareStateID(input interface{}, key string) (warnings []string, errors []error) {
	v, ok := input.(string)
	if !ok {
		errors = append(errors, fmt.Errorf("expected %q to be a string", key))
		return
	}

	if _, err := ParseUserManagedDeviceWindowsProtectionStateDetectedMalwareStateID(v); err != nil {
		errors = append(errors, err)
	}

	return
}

// ID returns the formatted User Managed Device Windows Protection State Detected Malware State ID
func (id UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId) ID() string {
	fmtString := "/users/%s/managedDevices/%s/windowsProtectionState/detectedMalwareState/%s"
	return fmt.Sprintf(fmtString, id.UserId, id.ManagedDeviceId, id.WindowsDeviceMalwareStateId)
}

// Segments returns a slice of Resource ID Segments which comprise this User Managed Device Windows Protection State Detected Malware State ID
func (id UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId) Segments() []resourceids.Segment {
	return []resourceids.Segment{
		resourceids.StaticSegment("staticUsers", "users", "users"),
		resourceids.UserSpecifiedSegment("userId", "userIdValue"),
		resourceids.StaticSegment("staticManagedDevices", "managedDevices", "managedDevices"),
		resourceids.UserSpecifiedSegment("managedDeviceId", "managedDeviceIdValue"),
		resourceids.StaticSegment("staticWindowsProtectionState", "windowsProtectionState", "windowsProtectionState"),
		resourceids.StaticSegment("staticDetectedMalwareState", "detectedMalwareState", "detectedMalwareState"),
		resourceids.UserSpecifiedSegment("windowsDeviceMalwareStateId", "windowsDeviceMalwareStateIdValue"),
	}
}

// String returns a human-readable description of this User Managed Device Windows Protection State Detected Malware State ID
func (id UserManagedDeviceWindowsProtectionStateDetectedMalwareStateId) String() string {
	components := []string{
		fmt.Sprintf("User: %q", id.UserId),
		fmt.Sprintf("Managed Device: %q", id.ManagedDeviceId),
		fmt.Sprintf("Windows Device Malware State: %q", id.WindowsDeviceMalwareStateId),
	}
	return fmt.Sprintf("User Managed Device Windows Protection State Detected Malware State (%s)", strings.Join(components, "\n"))
}
