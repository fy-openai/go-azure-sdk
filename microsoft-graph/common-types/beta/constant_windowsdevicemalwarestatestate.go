package beta

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type WindowsDeviceMalwareStateState string

const (
	WindowsDeviceMalwareStateState_Abandoned        WindowsDeviceMalwareStateState = "abandoned"
	WindowsDeviceMalwareStateState_AllowFailed      WindowsDeviceMalwareStateState = "allowFailed"
	WindowsDeviceMalwareStateState_Allowed          WindowsDeviceMalwareStateState = "allowed"
	WindowsDeviceMalwareStateState_BlockFailed      WindowsDeviceMalwareStateState = "blockFailed"
	WindowsDeviceMalwareStateState_Blocked          WindowsDeviceMalwareStateState = "blocked"
	WindowsDeviceMalwareStateState_CleanFailed      WindowsDeviceMalwareStateState = "cleanFailed"
	WindowsDeviceMalwareStateState_Cleaned          WindowsDeviceMalwareStateState = "cleaned"
	WindowsDeviceMalwareStateState_Detected         WindowsDeviceMalwareStateState = "detected"
	WindowsDeviceMalwareStateState_QuarantineFailed WindowsDeviceMalwareStateState = "quarantineFailed"
	WindowsDeviceMalwareStateState_Quarantined      WindowsDeviceMalwareStateState = "quarantined"
	WindowsDeviceMalwareStateState_RemoveFailed     WindowsDeviceMalwareStateState = "removeFailed"
	WindowsDeviceMalwareStateState_Removed          WindowsDeviceMalwareStateState = "removed"
	WindowsDeviceMalwareStateState_Unknown          WindowsDeviceMalwareStateState = "unknown"
)

func PossibleValuesForWindowsDeviceMalwareStateState() []string {
	return []string{
		string(WindowsDeviceMalwareStateState_Abandoned),
		string(WindowsDeviceMalwareStateState_AllowFailed),
		string(WindowsDeviceMalwareStateState_Allowed),
		string(WindowsDeviceMalwareStateState_BlockFailed),
		string(WindowsDeviceMalwareStateState_Blocked),
		string(WindowsDeviceMalwareStateState_CleanFailed),
		string(WindowsDeviceMalwareStateState_Cleaned),
		string(WindowsDeviceMalwareStateState_Detected),
		string(WindowsDeviceMalwareStateState_QuarantineFailed),
		string(WindowsDeviceMalwareStateState_Quarantined),
		string(WindowsDeviceMalwareStateState_RemoveFailed),
		string(WindowsDeviceMalwareStateState_Removed),
		string(WindowsDeviceMalwareStateState_Unknown),
	}
}

func (s *WindowsDeviceMalwareStateState) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseWindowsDeviceMalwareStateState(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseWindowsDeviceMalwareStateState(input string) (*WindowsDeviceMalwareStateState, error) {
	vals := map[string]WindowsDeviceMalwareStateState{
		"abandoned":        WindowsDeviceMalwareStateState_Abandoned,
		"allowfailed":      WindowsDeviceMalwareStateState_AllowFailed,
		"allowed":          WindowsDeviceMalwareStateState_Allowed,
		"blockfailed":      WindowsDeviceMalwareStateState_BlockFailed,
		"blocked":          WindowsDeviceMalwareStateState_Blocked,
		"cleanfailed":      WindowsDeviceMalwareStateState_CleanFailed,
		"cleaned":          WindowsDeviceMalwareStateState_Cleaned,
		"detected":         WindowsDeviceMalwareStateState_Detected,
		"quarantinefailed": WindowsDeviceMalwareStateState_QuarantineFailed,
		"quarantined":      WindowsDeviceMalwareStateState_Quarantined,
		"removefailed":     WindowsDeviceMalwareStateState_RemoveFailed,
		"removed":          WindowsDeviceMalwareStateState_Removed,
		"unknown":          WindowsDeviceMalwareStateState_Unknown,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := WindowsDeviceMalwareStateState(input)
	return &out, nil
}
