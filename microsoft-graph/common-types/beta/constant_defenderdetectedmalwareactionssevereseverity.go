package beta

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type DefenderDetectedMalwareActionsSevereSeverity string

const (
	DefenderDetectedMalwareActionsSevereSeverity_Allow         DefenderDetectedMalwareActionsSevereSeverity = "allow"
	DefenderDetectedMalwareActionsSevereSeverity_Block         DefenderDetectedMalwareActionsSevereSeverity = "block"
	DefenderDetectedMalwareActionsSevereSeverity_Clean         DefenderDetectedMalwareActionsSevereSeverity = "clean"
	DefenderDetectedMalwareActionsSevereSeverity_DeviceDefault DefenderDetectedMalwareActionsSevereSeverity = "deviceDefault"
	DefenderDetectedMalwareActionsSevereSeverity_Quarantine    DefenderDetectedMalwareActionsSevereSeverity = "quarantine"
	DefenderDetectedMalwareActionsSevereSeverity_Remove        DefenderDetectedMalwareActionsSevereSeverity = "remove"
	DefenderDetectedMalwareActionsSevereSeverity_UserDefined   DefenderDetectedMalwareActionsSevereSeverity = "userDefined"
)

func PossibleValuesForDefenderDetectedMalwareActionsSevereSeverity() []string {
	return []string{
		string(DefenderDetectedMalwareActionsSevereSeverity_Allow),
		string(DefenderDetectedMalwareActionsSevereSeverity_Block),
		string(DefenderDetectedMalwareActionsSevereSeverity_Clean),
		string(DefenderDetectedMalwareActionsSevereSeverity_DeviceDefault),
		string(DefenderDetectedMalwareActionsSevereSeverity_Quarantine),
		string(DefenderDetectedMalwareActionsSevereSeverity_Remove),
		string(DefenderDetectedMalwareActionsSevereSeverity_UserDefined),
	}
}

func (s *DefenderDetectedMalwareActionsSevereSeverity) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseDefenderDetectedMalwareActionsSevereSeverity(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseDefenderDetectedMalwareActionsSevereSeverity(input string) (*DefenderDetectedMalwareActionsSevereSeverity, error) {
	vals := map[string]DefenderDetectedMalwareActionsSevereSeverity{
		"allow":         DefenderDetectedMalwareActionsSevereSeverity_Allow,
		"block":         DefenderDetectedMalwareActionsSevereSeverity_Block,
		"clean":         DefenderDetectedMalwareActionsSevereSeverity_Clean,
		"devicedefault": DefenderDetectedMalwareActionsSevereSeverity_DeviceDefault,
		"quarantine":    DefenderDetectedMalwareActionsSevereSeverity_Quarantine,
		"remove":        DefenderDetectedMalwareActionsSevereSeverity_Remove,
		"userdefined":   DefenderDetectedMalwareActionsSevereSeverity_UserDefined,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := DefenderDetectedMalwareActionsSevereSeverity(input)
	return &out, nil
}
