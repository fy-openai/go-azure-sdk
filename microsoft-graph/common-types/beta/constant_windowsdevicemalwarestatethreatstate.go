package beta

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type WindowsDeviceMalwareStateThreatState string

const (
	WindowsDeviceMalwareStateThreatState_ActionFailed                      WindowsDeviceMalwareStateThreatState = "actionFailed"
	WindowsDeviceMalwareStateThreatState_Active                            WindowsDeviceMalwareStateThreatState = "active"
	WindowsDeviceMalwareStateThreatState_Allowed                           WindowsDeviceMalwareStateThreatState = "allowed"
	WindowsDeviceMalwareStateThreatState_Cleaned                           WindowsDeviceMalwareStateThreatState = "cleaned"
	WindowsDeviceMalwareStateThreatState_FullScanRequired                  WindowsDeviceMalwareStateThreatState = "fullScanRequired"
	WindowsDeviceMalwareStateThreatState_ManualStepsRequired               WindowsDeviceMalwareStateThreatState = "manualStepsRequired"
	WindowsDeviceMalwareStateThreatState_NoStatusCleared                   WindowsDeviceMalwareStateThreatState = "noStatusCleared"
	WindowsDeviceMalwareStateThreatState_Quarantined                       WindowsDeviceMalwareStateThreatState = "quarantined"
	WindowsDeviceMalwareStateThreatState_RebootRequired                    WindowsDeviceMalwareStateThreatState = "rebootRequired"
	WindowsDeviceMalwareStateThreatState_RemediatedWithNonCriticalFailures WindowsDeviceMalwareStateThreatState = "remediatedWithNonCriticalFailures"
	WindowsDeviceMalwareStateThreatState_Removed                           WindowsDeviceMalwareStateThreatState = "removed"
)

func PossibleValuesForWindowsDeviceMalwareStateThreatState() []string {
	return []string{
		string(WindowsDeviceMalwareStateThreatState_ActionFailed),
		string(WindowsDeviceMalwareStateThreatState_Active),
		string(WindowsDeviceMalwareStateThreatState_Allowed),
		string(WindowsDeviceMalwareStateThreatState_Cleaned),
		string(WindowsDeviceMalwareStateThreatState_FullScanRequired),
		string(WindowsDeviceMalwareStateThreatState_ManualStepsRequired),
		string(WindowsDeviceMalwareStateThreatState_NoStatusCleared),
		string(WindowsDeviceMalwareStateThreatState_Quarantined),
		string(WindowsDeviceMalwareStateThreatState_RebootRequired),
		string(WindowsDeviceMalwareStateThreatState_RemediatedWithNonCriticalFailures),
		string(WindowsDeviceMalwareStateThreatState_Removed),
	}
}

func (s *WindowsDeviceMalwareStateThreatState) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseWindowsDeviceMalwareStateThreatState(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseWindowsDeviceMalwareStateThreatState(input string) (*WindowsDeviceMalwareStateThreatState, error) {
	vals := map[string]WindowsDeviceMalwareStateThreatState{
		"actionfailed":                      WindowsDeviceMalwareStateThreatState_ActionFailed,
		"active":                            WindowsDeviceMalwareStateThreatState_Active,
		"allowed":                           WindowsDeviceMalwareStateThreatState_Allowed,
		"cleaned":                           WindowsDeviceMalwareStateThreatState_Cleaned,
		"fullscanrequired":                  WindowsDeviceMalwareStateThreatState_FullScanRequired,
		"manualstepsrequired":               WindowsDeviceMalwareStateThreatState_ManualStepsRequired,
		"nostatuscleared":                   WindowsDeviceMalwareStateThreatState_NoStatusCleared,
		"quarantined":                       WindowsDeviceMalwareStateThreatState_Quarantined,
		"rebootrequired":                    WindowsDeviceMalwareStateThreatState_RebootRequired,
		"remediatedwithnoncriticalfailures": WindowsDeviceMalwareStateThreatState_RemediatedWithNonCriticalFailures,
		"removed":                           WindowsDeviceMalwareStateThreatState_Removed,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := WindowsDeviceMalwareStateThreatState(input)
	return &out, nil
}
