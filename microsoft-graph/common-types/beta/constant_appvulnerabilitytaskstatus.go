package beta

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type AppVulnerabilityTaskStatus string

const (
	AppVulnerabilityTaskStatus_Active    AppVulnerabilityTaskStatus = "active"
	AppVulnerabilityTaskStatus_Completed AppVulnerabilityTaskStatus = "completed"
	AppVulnerabilityTaskStatus_Pending   AppVulnerabilityTaskStatus = "pending"
	AppVulnerabilityTaskStatus_Rejected  AppVulnerabilityTaskStatus = "rejected"
	AppVulnerabilityTaskStatus_Unknown   AppVulnerabilityTaskStatus = "unknown"
)

func PossibleValuesForAppVulnerabilityTaskStatus() []string {
	return []string{
		string(AppVulnerabilityTaskStatus_Active),
		string(AppVulnerabilityTaskStatus_Completed),
		string(AppVulnerabilityTaskStatus_Pending),
		string(AppVulnerabilityTaskStatus_Rejected),
		string(AppVulnerabilityTaskStatus_Unknown),
	}
}

func (s *AppVulnerabilityTaskStatus) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseAppVulnerabilityTaskStatus(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseAppVulnerabilityTaskStatus(input string) (*AppVulnerabilityTaskStatus, error) {
	vals := map[string]AppVulnerabilityTaskStatus{
		"active":    AppVulnerabilityTaskStatus_Active,
		"completed": AppVulnerabilityTaskStatus_Completed,
		"pending":   AppVulnerabilityTaskStatus_Pending,
		"rejected":  AppVulnerabilityTaskStatus_Rejected,
		"unknown":   AppVulnerabilityTaskStatus_Unknown,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := AppVulnerabilityTaskStatus(input)
	return &out, nil
}
