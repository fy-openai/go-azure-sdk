package stable

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type WindowsDeviceMalwareStateSeverity string

const (
	WindowsDeviceMalwareStateSeverity_High     WindowsDeviceMalwareStateSeverity = "high"
	WindowsDeviceMalwareStateSeverity_Low      WindowsDeviceMalwareStateSeverity = "low"
	WindowsDeviceMalwareStateSeverity_Moderate WindowsDeviceMalwareStateSeverity = "moderate"
	WindowsDeviceMalwareStateSeverity_Severe   WindowsDeviceMalwareStateSeverity = "severe"
	WindowsDeviceMalwareStateSeverity_Unknown  WindowsDeviceMalwareStateSeverity = "unknown"
)

func PossibleValuesForWindowsDeviceMalwareStateSeverity() []string {
	return []string{
		string(WindowsDeviceMalwareStateSeverity_High),
		string(WindowsDeviceMalwareStateSeverity_Low),
		string(WindowsDeviceMalwareStateSeverity_Moderate),
		string(WindowsDeviceMalwareStateSeverity_Severe),
		string(WindowsDeviceMalwareStateSeverity_Unknown),
	}
}

func (s *WindowsDeviceMalwareStateSeverity) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseWindowsDeviceMalwareStateSeverity(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseWindowsDeviceMalwareStateSeverity(input string) (*WindowsDeviceMalwareStateSeverity, error) {
	vals := map[string]WindowsDeviceMalwareStateSeverity{
		"high":     WindowsDeviceMalwareStateSeverity_High,
		"low":      WindowsDeviceMalwareStateSeverity_Low,
		"moderate": WindowsDeviceMalwareStateSeverity_Moderate,
		"severe":   WindowsDeviceMalwareStateSeverity_Severe,
		"unknown":  WindowsDeviceMalwareStateSeverity_Unknown,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := WindowsDeviceMalwareStateSeverity(input)
	return &out, nil
}
