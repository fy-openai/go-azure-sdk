package stable

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type WindowsDeviceMalwareStateExecutionState string

const (
	WindowsDeviceMalwareStateExecutionState_Allowed    WindowsDeviceMalwareStateExecutionState = "allowed"
	WindowsDeviceMalwareStateExecutionState_Blocked    WindowsDeviceMalwareStateExecutionState = "blocked"
	WindowsDeviceMalwareStateExecutionState_NotRunning WindowsDeviceMalwareStateExecutionState = "notRunning"
	WindowsDeviceMalwareStateExecutionState_Running    WindowsDeviceMalwareStateExecutionState = "running"
	WindowsDeviceMalwareStateExecutionState_Unknown    WindowsDeviceMalwareStateExecutionState = "unknown"
)

func PossibleValuesForWindowsDeviceMalwareStateExecutionState() []string {
	return []string{
		string(WindowsDeviceMalwareStateExecutionState_Allowed),
		string(WindowsDeviceMalwareStateExecutionState_Blocked),
		string(WindowsDeviceMalwareStateExecutionState_NotRunning),
		string(WindowsDeviceMalwareStateExecutionState_Running),
		string(WindowsDeviceMalwareStateExecutionState_Unknown),
	}
}

func (s *WindowsDeviceMalwareStateExecutionState) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseWindowsDeviceMalwareStateExecutionState(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseWindowsDeviceMalwareStateExecutionState(input string) (*WindowsDeviceMalwareStateExecutionState, error) {
	vals := map[string]WindowsDeviceMalwareStateExecutionState{
		"allowed":    WindowsDeviceMalwareStateExecutionState_Allowed,
		"blocked":    WindowsDeviceMalwareStateExecutionState_Blocked,
		"notrunning": WindowsDeviceMalwareStateExecutionState_NotRunning,
		"running":    WindowsDeviceMalwareStateExecutionState_Running,
		"unknown":    WindowsDeviceMalwareStateExecutionState_Unknown,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := WindowsDeviceMalwareStateExecutionState(input)
	return &out, nil
}
