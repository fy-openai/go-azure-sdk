package stable

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type WindowsMalwareStateCountState string

const (
	WindowsMalwareStateCountState_ActionFailed                      WindowsMalwareStateCountState = "actionFailed"
	WindowsMalwareStateCountState_Active                            WindowsMalwareStateCountState = "active"
	WindowsMalwareStateCountState_Allowed                           WindowsMalwareStateCountState = "allowed"
	WindowsMalwareStateCountState_Cleaned                           WindowsMalwareStateCountState = "cleaned"
	WindowsMalwareStateCountState_FullScanRequired                  WindowsMalwareStateCountState = "fullScanRequired"
	WindowsMalwareStateCountState_ManualStepsRequired               WindowsMalwareStateCountState = "manualStepsRequired"
	WindowsMalwareStateCountState_NoStatusCleared                   WindowsMalwareStateCountState = "noStatusCleared"
	WindowsMalwareStateCountState_Quarantined                       WindowsMalwareStateCountState = "quarantined"
	WindowsMalwareStateCountState_RebootRequired                    WindowsMalwareStateCountState = "rebootRequired"
	WindowsMalwareStateCountState_RemediatedWithNonCriticalFailures WindowsMalwareStateCountState = "remediatedWithNonCriticalFailures"
	WindowsMalwareStateCountState_Removed                           WindowsMalwareStateCountState = "removed"
)

func PossibleValuesForWindowsMalwareStateCountState() []string {
	return []string{
		string(WindowsMalwareStateCountState_ActionFailed),
		string(WindowsMalwareStateCountState_Active),
		string(WindowsMalwareStateCountState_Allowed),
		string(WindowsMalwareStateCountState_Cleaned),
		string(WindowsMalwareStateCountState_FullScanRequired),
		string(WindowsMalwareStateCountState_ManualStepsRequired),
		string(WindowsMalwareStateCountState_NoStatusCleared),
		string(WindowsMalwareStateCountState_Quarantined),
		string(WindowsMalwareStateCountState_RebootRequired),
		string(WindowsMalwareStateCountState_RemediatedWithNonCriticalFailures),
		string(WindowsMalwareStateCountState_Removed),
	}
}

func (s *WindowsMalwareStateCountState) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseWindowsMalwareStateCountState(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseWindowsMalwareStateCountState(input string) (*WindowsMalwareStateCountState, error) {
	vals := map[string]WindowsMalwareStateCountState{
		"actionfailed":                      WindowsMalwareStateCountState_ActionFailed,
		"active":                            WindowsMalwareStateCountState_Active,
		"allowed":                           WindowsMalwareStateCountState_Allowed,
		"cleaned":                           WindowsMalwareStateCountState_Cleaned,
		"fullscanrequired":                  WindowsMalwareStateCountState_FullScanRequired,
		"manualstepsrequired":               WindowsMalwareStateCountState_ManualStepsRequired,
		"nostatuscleared":                   WindowsMalwareStateCountState_NoStatusCleared,
		"quarantined":                       WindowsMalwareStateCountState_Quarantined,
		"rebootrequired":                    WindowsMalwareStateCountState_RebootRequired,
		"remediatedwithnoncriticalfailures": WindowsMalwareStateCountState_RemediatedWithNonCriticalFailures,
		"removed":                           WindowsMalwareStateCountState_Removed,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := WindowsMalwareStateCountState(input)
	return &out, nil
}
