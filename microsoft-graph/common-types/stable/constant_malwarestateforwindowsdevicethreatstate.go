package stable

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type MalwareStateForWindowsDeviceThreatState string

const (
	MalwareStateForWindowsDeviceThreatState_ActionFailed                      MalwareStateForWindowsDeviceThreatState = "actionFailed"
	MalwareStateForWindowsDeviceThreatState_Active                            MalwareStateForWindowsDeviceThreatState = "active"
	MalwareStateForWindowsDeviceThreatState_Allowed                           MalwareStateForWindowsDeviceThreatState = "allowed"
	MalwareStateForWindowsDeviceThreatState_Cleaned                           MalwareStateForWindowsDeviceThreatState = "cleaned"
	MalwareStateForWindowsDeviceThreatState_FullScanRequired                  MalwareStateForWindowsDeviceThreatState = "fullScanRequired"
	MalwareStateForWindowsDeviceThreatState_ManualStepsRequired               MalwareStateForWindowsDeviceThreatState = "manualStepsRequired"
	MalwareStateForWindowsDeviceThreatState_NoStatusCleared                   MalwareStateForWindowsDeviceThreatState = "noStatusCleared"
	MalwareStateForWindowsDeviceThreatState_Quarantined                       MalwareStateForWindowsDeviceThreatState = "quarantined"
	MalwareStateForWindowsDeviceThreatState_RebootRequired                    MalwareStateForWindowsDeviceThreatState = "rebootRequired"
	MalwareStateForWindowsDeviceThreatState_RemediatedWithNonCriticalFailures MalwareStateForWindowsDeviceThreatState = "remediatedWithNonCriticalFailures"
	MalwareStateForWindowsDeviceThreatState_Removed                           MalwareStateForWindowsDeviceThreatState = "removed"
)

func PossibleValuesForMalwareStateForWindowsDeviceThreatState() []string {
	return []string{
		string(MalwareStateForWindowsDeviceThreatState_ActionFailed),
		string(MalwareStateForWindowsDeviceThreatState_Active),
		string(MalwareStateForWindowsDeviceThreatState_Allowed),
		string(MalwareStateForWindowsDeviceThreatState_Cleaned),
		string(MalwareStateForWindowsDeviceThreatState_FullScanRequired),
		string(MalwareStateForWindowsDeviceThreatState_ManualStepsRequired),
		string(MalwareStateForWindowsDeviceThreatState_NoStatusCleared),
		string(MalwareStateForWindowsDeviceThreatState_Quarantined),
		string(MalwareStateForWindowsDeviceThreatState_RebootRequired),
		string(MalwareStateForWindowsDeviceThreatState_RemediatedWithNonCriticalFailures),
		string(MalwareStateForWindowsDeviceThreatState_Removed),
	}
}

func (s *MalwareStateForWindowsDeviceThreatState) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseMalwareStateForWindowsDeviceThreatState(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseMalwareStateForWindowsDeviceThreatState(input string) (*MalwareStateForWindowsDeviceThreatState, error) {
	vals := map[string]MalwareStateForWindowsDeviceThreatState{
		"actionfailed":                      MalwareStateForWindowsDeviceThreatState_ActionFailed,
		"active":                            MalwareStateForWindowsDeviceThreatState_Active,
		"allowed":                           MalwareStateForWindowsDeviceThreatState_Allowed,
		"cleaned":                           MalwareStateForWindowsDeviceThreatState_Cleaned,
		"fullscanrequired":                  MalwareStateForWindowsDeviceThreatState_FullScanRequired,
		"manualstepsrequired":               MalwareStateForWindowsDeviceThreatState_ManualStepsRequired,
		"nostatuscleared":                   MalwareStateForWindowsDeviceThreatState_NoStatusCleared,
		"quarantined":                       MalwareStateForWindowsDeviceThreatState_Quarantined,
		"rebootrequired":                    MalwareStateForWindowsDeviceThreatState_RebootRequired,
		"remediatedwithnoncriticalfailures": MalwareStateForWindowsDeviceThreatState_RemediatedWithNonCriticalFailures,
		"removed":                           MalwareStateForWindowsDeviceThreatState_Removed,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := MalwareStateForWindowsDeviceThreatState(input)
	return &out, nil
}
