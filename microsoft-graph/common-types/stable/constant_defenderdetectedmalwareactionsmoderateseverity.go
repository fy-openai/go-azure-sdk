package stable

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type DefenderDetectedMalwareActionsModerateSeverity string

const (
	DefenderDetectedMalwareActionsModerateSeverity_Allow         DefenderDetectedMalwareActionsModerateSeverity = "allow"
	DefenderDetectedMalwareActionsModerateSeverity_Block         DefenderDetectedMalwareActionsModerateSeverity = "block"
	DefenderDetectedMalwareActionsModerateSeverity_Clean         DefenderDetectedMalwareActionsModerateSeverity = "clean"
	DefenderDetectedMalwareActionsModerateSeverity_DeviceDefault DefenderDetectedMalwareActionsModerateSeverity = "deviceDefault"
	DefenderDetectedMalwareActionsModerateSeverity_Quarantine    DefenderDetectedMalwareActionsModerateSeverity = "quarantine"
	DefenderDetectedMalwareActionsModerateSeverity_Remove        DefenderDetectedMalwareActionsModerateSeverity = "remove"
	DefenderDetectedMalwareActionsModerateSeverity_UserDefined   DefenderDetectedMalwareActionsModerateSeverity = "userDefined"
)

func PossibleValuesForDefenderDetectedMalwareActionsModerateSeverity() []string {
	return []string{
		string(DefenderDetectedMalwareActionsModerateSeverity_Allow),
		string(DefenderDetectedMalwareActionsModerateSeverity_Block),
		string(DefenderDetectedMalwareActionsModerateSeverity_Clean),
		string(DefenderDetectedMalwareActionsModerateSeverity_DeviceDefault),
		string(DefenderDetectedMalwareActionsModerateSeverity_Quarantine),
		string(DefenderDetectedMalwareActionsModerateSeverity_Remove),
		string(DefenderDetectedMalwareActionsModerateSeverity_UserDefined),
	}
}

func (s *DefenderDetectedMalwareActionsModerateSeverity) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseDefenderDetectedMalwareActionsModerateSeverity(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseDefenderDetectedMalwareActionsModerateSeverity(input string) (*DefenderDetectedMalwareActionsModerateSeverity, error) {
	vals := map[string]DefenderDetectedMalwareActionsModerateSeverity{
		"allow":         DefenderDetectedMalwareActionsModerateSeverity_Allow,
		"block":         DefenderDetectedMalwareActionsModerateSeverity_Block,
		"clean":         DefenderDetectedMalwareActionsModerateSeverity_Clean,
		"devicedefault": DefenderDetectedMalwareActionsModerateSeverity_DeviceDefault,
		"quarantine":    DefenderDetectedMalwareActionsModerateSeverity_Quarantine,
		"remove":        DefenderDetectedMalwareActionsModerateSeverity_Remove,
		"userdefined":   DefenderDetectedMalwareActionsModerateSeverity_UserDefined,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := DefenderDetectedMalwareActionsModerateSeverity(input)
	return &out, nil
}
