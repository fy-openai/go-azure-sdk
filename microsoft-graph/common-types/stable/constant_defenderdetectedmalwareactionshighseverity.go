package stable

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type DefenderDetectedMalwareActionsHighSeverity string

const (
	DefenderDetectedMalwareActionsHighSeverity_Allow         DefenderDetectedMalwareActionsHighSeverity = "allow"
	DefenderDetectedMalwareActionsHighSeverity_Block         DefenderDetectedMalwareActionsHighSeverity = "block"
	DefenderDetectedMalwareActionsHighSeverity_Clean         DefenderDetectedMalwareActionsHighSeverity = "clean"
	DefenderDetectedMalwareActionsHighSeverity_DeviceDefault DefenderDetectedMalwareActionsHighSeverity = "deviceDefault"
	DefenderDetectedMalwareActionsHighSeverity_Quarantine    DefenderDetectedMalwareActionsHighSeverity = "quarantine"
	DefenderDetectedMalwareActionsHighSeverity_Remove        DefenderDetectedMalwareActionsHighSeverity = "remove"
	DefenderDetectedMalwareActionsHighSeverity_UserDefined   DefenderDetectedMalwareActionsHighSeverity = "userDefined"
)

func PossibleValuesForDefenderDetectedMalwareActionsHighSeverity() []string {
	return []string{
		string(DefenderDetectedMalwareActionsHighSeverity_Allow),
		string(DefenderDetectedMalwareActionsHighSeverity_Block),
		string(DefenderDetectedMalwareActionsHighSeverity_Clean),
		string(DefenderDetectedMalwareActionsHighSeverity_DeviceDefault),
		string(DefenderDetectedMalwareActionsHighSeverity_Quarantine),
		string(DefenderDetectedMalwareActionsHighSeverity_Remove),
		string(DefenderDetectedMalwareActionsHighSeverity_UserDefined),
	}
}

func (s *DefenderDetectedMalwareActionsHighSeverity) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseDefenderDetectedMalwareActionsHighSeverity(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseDefenderDetectedMalwareActionsHighSeverity(input string) (*DefenderDetectedMalwareActionsHighSeverity, error) {
	vals := map[string]DefenderDetectedMalwareActionsHighSeverity{
		"allow":         DefenderDetectedMalwareActionsHighSeverity_Allow,
		"block":         DefenderDetectedMalwareActionsHighSeverity_Block,
		"clean":         DefenderDetectedMalwareActionsHighSeverity_Clean,
		"devicedefault": DefenderDetectedMalwareActionsHighSeverity_DeviceDefault,
		"quarantine":    DefenderDetectedMalwareActionsHighSeverity_Quarantine,
		"remove":        DefenderDetectedMalwareActionsHighSeverity_Remove,
		"userdefined":   DefenderDetectedMalwareActionsHighSeverity_UserDefined,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := DefenderDetectedMalwareActionsHighSeverity(input)
	return &out, nil
}
