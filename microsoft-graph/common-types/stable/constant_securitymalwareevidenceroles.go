package stable

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type SecurityMalwareEvidenceRoles string

const (
	SecurityMalwareEvidenceRoles_Added             SecurityMalwareEvidenceRoles = "added"
	SecurityMalwareEvidenceRoles_Attacked          SecurityMalwareEvidenceRoles = "attacked"
	SecurityMalwareEvidenceRoles_Attacker          SecurityMalwareEvidenceRoles = "attacker"
	SecurityMalwareEvidenceRoles_CommandAndControl SecurityMalwareEvidenceRoles = "commandAndControl"
	SecurityMalwareEvidenceRoles_Compromised       SecurityMalwareEvidenceRoles = "compromised"
	SecurityMalwareEvidenceRoles_Contextual        SecurityMalwareEvidenceRoles = "contextual"
	SecurityMalwareEvidenceRoles_Created           SecurityMalwareEvidenceRoles = "created"
	SecurityMalwareEvidenceRoles_Destination       SecurityMalwareEvidenceRoles = "destination"
	SecurityMalwareEvidenceRoles_Edited            SecurityMalwareEvidenceRoles = "edited"
	SecurityMalwareEvidenceRoles_Loaded            SecurityMalwareEvidenceRoles = "loaded"
	SecurityMalwareEvidenceRoles_PolicyViolator    SecurityMalwareEvidenceRoles = "policyViolator"
	SecurityMalwareEvidenceRoles_Scanned           SecurityMalwareEvidenceRoles = "scanned"
	SecurityMalwareEvidenceRoles_Source            SecurityMalwareEvidenceRoles = "source"
	SecurityMalwareEvidenceRoles_Suspicious        SecurityMalwareEvidenceRoles = "suspicious"
	SecurityMalwareEvidenceRoles_Unknown           SecurityMalwareEvidenceRoles = "unknown"
)

func PossibleValuesForSecurityMalwareEvidenceRoles() []string {
	return []string{
		string(SecurityMalwareEvidenceRoles_Added),
		string(SecurityMalwareEvidenceRoles_Attacked),
		string(SecurityMalwareEvidenceRoles_Attacker),
		string(SecurityMalwareEvidenceRoles_CommandAndControl),
		string(SecurityMalwareEvidenceRoles_Compromised),
		string(SecurityMalwareEvidenceRoles_Contextual),
		string(SecurityMalwareEvidenceRoles_Created),
		string(SecurityMalwareEvidenceRoles_Destination),
		string(SecurityMalwareEvidenceRoles_Edited),
		string(SecurityMalwareEvidenceRoles_Loaded),
		string(SecurityMalwareEvidenceRoles_PolicyViolator),
		string(SecurityMalwareEvidenceRoles_Scanned),
		string(SecurityMalwareEvidenceRoles_Source),
		string(SecurityMalwareEvidenceRoles_Suspicious),
		string(SecurityMalwareEvidenceRoles_Unknown),
	}
}

func (s *SecurityMalwareEvidenceRoles) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseSecurityMalwareEvidenceRoles(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseSecurityMalwareEvidenceRoles(input string) (*SecurityMalwareEvidenceRoles, error) {
	vals := map[string]SecurityMalwareEvidenceRoles{
		"added":             SecurityMalwareEvidenceRoles_Added,
		"attacked":          SecurityMalwareEvidenceRoles_Attacked,
		"attacker":          SecurityMalwareEvidenceRoles_Attacker,
		"commandandcontrol": SecurityMalwareEvidenceRoles_CommandAndControl,
		"compromised":       SecurityMalwareEvidenceRoles_Compromised,
		"contextual":        SecurityMalwareEvidenceRoles_Contextual,
		"created":           SecurityMalwareEvidenceRoles_Created,
		"destination":       SecurityMalwareEvidenceRoles_Destination,
		"edited":            SecurityMalwareEvidenceRoles_Edited,
		"loaded":            SecurityMalwareEvidenceRoles_Loaded,
		"policyviolator":    SecurityMalwareEvidenceRoles_PolicyViolator,
		"scanned":           SecurityMalwareEvidenceRoles_Scanned,
		"source":            SecurityMalwareEvidenceRoles_Source,
		"suspicious":        SecurityMalwareEvidenceRoles_Suspicious,
		"unknown":           SecurityMalwareEvidenceRoles_Unknown,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := SecurityMalwareEvidenceRoles(input)
	return &out, nil
}
