package stable

import (
	"encoding/json"
	"fmt"
	"strings"
)

// Copyright (c) HashiCorp Inc. All rights reserved.
// Licensed under the MIT License. See NOTICE.txt in the project root for license information.

type DefenderDetectedMalwareActionsLowSeverity string

const (
	DefenderDetectedMalwareActionsLowSeverity_Allow         DefenderDetectedMalwareActionsLowSeverity = "allow"
	DefenderDetectedMalwareActionsLowSeverity_Block         DefenderDetectedMalwareActionsLowSeverity = "block"
	DefenderDetectedMalwareActionsLowSeverity_Clean         DefenderDetectedMalwareActionsLowSeverity = "clean"
	DefenderDetectedMalwareActionsLowSeverity_DeviceDefault DefenderDetectedMalwareActionsLowSeverity = "deviceDefault"
	DefenderDetectedMalwareActionsLowSeverity_Quarantine    DefenderDetectedMalwareActionsLowSeverity = "quarantine"
	DefenderDetectedMalwareActionsLowSeverity_Remove        DefenderDetectedMalwareActionsLowSeverity = "remove"
	DefenderDetectedMalwareActionsLowSeverity_UserDefined   DefenderDetectedMalwareActionsLowSeverity = "userDefined"
)

func PossibleValuesForDefenderDetectedMalwareActionsLowSeverity() []string {
	return []string{
		string(DefenderDetectedMalwareActionsLowSeverity_Allow),
		string(DefenderDetectedMalwareActionsLowSeverity_Block),
		string(DefenderDetectedMalwareActionsLowSeverity_Clean),
		string(DefenderDetectedMalwareActionsLowSeverity_DeviceDefault),
		string(DefenderDetectedMalwareActionsLowSeverity_Quarantine),
		string(DefenderDetectedMalwareActionsLowSeverity_Remove),
		string(DefenderDetectedMalwareActionsLowSeverity_UserDefined),
	}
}

func (s *DefenderDetectedMalwareActionsLowSeverity) UnmarshalJSON(bytes []byte) error {
	var decoded string
	if err := json.Unmarshal(bytes, &decoded); err != nil {
		return fmt.Errorf("unmarshaling: %+v", err)
	}
	out, err := parseDefenderDetectedMalwareActionsLowSeverity(decoded)
	if err != nil {
		return fmt.Errorf("parsing %q: %+v", decoded, err)
	}
	*s = *out
	return nil
}

func parseDefenderDetectedMalwareActionsLowSeverity(input string) (*DefenderDetectedMalwareActionsLowSeverity, error) {
	vals := map[string]DefenderDetectedMalwareActionsLowSeverity{
		"allow":         DefenderDetectedMalwareActionsLowSeverity_Allow,
		"block":         DefenderDetectedMalwareActionsLowSeverity_Block,
		"clean":         DefenderDetectedMalwareActionsLowSeverity_Clean,
		"devicedefault": DefenderDetectedMalwareActionsLowSeverity_DeviceDefault,
		"quarantine":    DefenderDetectedMalwareActionsLowSeverity_Quarantine,
		"remove":        DefenderDetectedMalwareActionsLowSeverity_Remove,
		"userdefined":   DefenderDetectedMalwareActionsLowSeverity_UserDefined,
	}
	if v, ok := vals[strings.ToLower(input)]; ok {
		return &v, nil
	}

	// otherwise presume it's an undefined value and best-effort it
	out := DefenderDetectedMalwareActionsLowSeverity(input)
	return &out, nil
}
